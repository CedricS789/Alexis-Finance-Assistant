{
  "name": "Finance Assistant v2",
  "nodes": [
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [
        464,
        -896
      ],
      "id": "c38f7603-161d-4842-80bc-fa018340b602",
      "name": "Telegram Trigger",
      "webhookId": "f376e204-ebe4-4e9e-92db-35aaf13111f2",
      "credentials": {
        "telegramApi": {
          "id": "dbqH4B8wU0fwEyd9",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "loose",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.message.voice }}",
                    "rightValue": "",
                    "operator": {
                      "type": "object",
                      "operation": "exists",
                      "singleValue": true
                    },
                    "id": "a315ed3e-17bb-4063-b791-fa97de448bba"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Voice"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "loose",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "860634d1-8cbf-45bd-b57b-eae577613a73",
                    "leftValue": "={{ $json.message.photo }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Photo"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "loose",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "7a5b57c2-9a29-41c4-8a1e-da97c4f890ba",
                    "leftValue": "={{ $json.message.text }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Text"
            }
          ]
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.3,
      "position": [
        688,
        -912
      ],
      "id": "7d230621-7404-48e9-ab40-3d1903977f71",
      "name": "Switch Input Type"
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ $json.message.voice.file_id }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        912,
        -1280
      ],
      "id": "1a8eb4ab-44c5-4751-8bfa-900330e931a1",
      "name": "Get Voice File",
      "webhookId": "afa10f0b-de41-4cfe-8ef6-918e9f65cc00",
      "credentials": {
        "telegramApi": {
          "id": "dbqH4B8wU0fwEyd9",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "resource": "audio",
        "modelId": {
          "__rl": true,
          "value": "models/gemini-2.5-flash",
          "mode": "list",
          "cachedResultName": "models/gemini-2.5-flash"
        },
        "inputType": "binary",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "typeVersion": 1,
      "position": [
        1136,
        -1280
      ],
      "id": "48be0ebe-a53b-40d3-92a1-fd90874add9d",
      "name": "Transcribe Recording",
      "credentials": {
        "googlePalmApi": {
          "id": "CTf2VqOHGTu2mfy7",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ $json.message.photo[2].file_id }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        912,
        -1088
      ],
      "id": "d27719a6-6563-4450-bb18-aa884406b921",
      "name": "Get Photo File",
      "webhookId": "afa10f0b-de41-4cfe-8ef6-918e9f65cc00",
      "credentials": {
        "telegramApi": {
          "id": "dbqH4B8wU0fwEyd9",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "resource": "image",
        "operation": "analyze",
        "modelId": {
          "__rl": true,
          "value": "models/gemini-2.5-flash",
          "mode": "list",
          "cachedResultName": "models/gemini-2.5-flash"
        },
        "text": "=Analyze this image by identifying the single **main subject** and, only if relevant to a financial transaction (e.g., receipt, invoice, or labeled product), extract any visible text including the purchase date. Do not interpret intent, make assumptions, or extract text from non-financial contexts (e.g., random objects, scenes, or backgrounds without transaction clues).\n\nConsider the following user caption as additional context for identifying the main subject, refining descriptions, or assessing financial relevance, but always base your analysis primarily on the visible image content itself. If the caption poses a specific query (e.g., about color or type), incorporate relevant details from the image into your main subject description where appropriate, without fabricating information. If the caption provides financial details (e.g., amount spent), note it only if it aligns with image content, but do not let it override what is visible.\n\nUser Caption: {{ $('Telegram Trigger').item.json.message.caption || 'No caption provided' }}\n\n## Two-Step Process:\n\n1. **Identify and State the Main Subject:** Determine the image's primary focal point or the most prominent object, incorporating caption context if relevant (e.g., specifying color or type if queried and visible).\n\n2. **Conditional Text & Date Extraction (OCR):** Only if the main subject indicates a financial context (e.g., a receipt, bill, price tag, or product label with pricing), read all visible text. Otherwise, skip this step entirely. For dates, follow the critical rule below.\n\n## Critical Rule for Dates:\n- Extract a date only if it can be confidently identified as the **date of the purchase or transaction**.\n- Look for contextual clues like the keywords \"Date:\", \"Order Date:\", or a prominent position at the top of a receipt.\n- Ignore non-purchase dates like expiration dates, \"Valid Until\" dates, or birth dates.\n- If no plausible **purchase date** is found (or if no text extraction is warranted), do not output a date.\n\n## Output Format:\nYour output **MUST** be plain text and follow this exact structure.\nThe `Main Subject:` line is **mandatory**.\nInclude `Date Found:` and `Extracted Text:` **only** if text extraction is relevant (financial context); otherwise, omit them.\n\n**Main Subject:** [A concise description of the single most important object, e.g., \"A cup of coffee\", \"A paper receipt\", \"A pair of running shoes\"]\n\n[If relevant:]\n**Date Found:** [YYYY-MM-DD, only if a valid purchase date is found]\n\n**Extracted Text:**\n[All relevant text found on the image]\n\n## Example 1: Financial Context (Receipt) with Caption\n- **Image:** A photo of a receipt for coffee.\n- **User Caption:** \"I spent €3.50 on this coffee today.\"\n- **Required Output:**\n  **Main Subject:** A paper receipt\n\n  **Date Found:** 2025-09-26\n\n  **Extracted Text:**\n  COFFEE SHOP\n  Americano\n  €3.50\n\n## Example 2: Non-Financial Context (Object) with Query Caption\n- **Image:** A photo of a red computer mouse on a desk.\n- **User Caption:** \"What color is this mouse?\"\n- **Required Output:**\n  **Main Subject:** A red computer mouse\n\n## Example 3: Non-Financial Context (Object Without Text), No Caption\n- **Image:** A photo of a computer mouse on a desk.\n- **User Caption:** None\n- **Required Output:**\n  **Main Subject:** A computer mouse\n\n## CRITICAL: How to Handle Failures\n\n1. **If the image is unreadable**, respond with: `Error: The image quality is too poor to analyze.`\n2. **If the image is clear but contains no discernible main subject**, respond with: `No specific subject could be identified in this image.`\n\n## Notes:\n- Today is {{ $now }}.\n- The default currency is Euro (€).",
        "inputType": "binary",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "typeVersion": 1,
      "position": [
        1136,
        -1088
      ],
      "id": "2fbdf806-6c55-4967-bb12-d301591fdd9b",
      "name": "Analyze Image",
      "credentials": {
        "googlePalmApi": {
          "id": "CTf2VqOHGTu2mfy7",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "text": "={{ $json.output }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        5584,
        -960
      ],
      "id": "55a5f711-3f30-40b6-83d8-cfdc31c6ac34",
      "name": "Send Success Message",
      "webhookId": "b4d1bc48-042f-4441-a14d-c1ab6975cf9d",
      "credentials": {
        "telegramApi": {
          "id": "dbqH4B8wU0fwEyd9",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolCalculator",
      "typeVersion": 1,
      "position": [
        2240,
        528
      ],
      "id": "fb826b33-2b81-40e3-ad9a-10284e457ddb",
      "name": "Calculator"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Telegram Trigger').item.json.message.chat.id }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        5296,
        528
      ],
      "id": "6cf2c724-d2be-4fee-b3bc-2faab0230f28",
      "name": "Simple Memory1"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolThink",
      "typeVersion": 1.1,
      "position": [
        5888,
        528
      ],
      "id": "ae329516-06ac-4bf7-860b-4465901d5782",
      "name": "Think1"
    },
    {
      "parameters": {
        "toolDescription": "This agent answers questions about the user's financial data. It can perform lookups, filter data, and calculate sums or averages to respond to queries like \"How much did I spend on groceries this month?",
        "text": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Prompt__User_Message_', `Isolated prompt for the agent`, 'string') }}",
        "needsFallback": true,
        "options": {
          "systemMessage": "=You are the Data Analyst Agent, a financial data specialist. You handle ONLY read-only queries and analysis. You communicate EXCLUSIVELY with the Manager Agent - never with users.\n\n## CORE CAPABILITIES\n- Query expenses, incomes, transfers, accounts, categories, sources\n- Calculate sums, averages, trends, comparisons\n- Provide budget analysis and spending insights\n- Generate financial forecasts and affordability assessments\n- Deliver account balance summaries and projections\n\n## STRICT LIMITATIONS\nYou CANNOT and MUST NOT:\n- Create, update, or delete any records\n- Process transactions or transfers\n- Schedule recurring items\n- Perform any database write operations\n\n## MANDATORY RESPONSE VERIFICATION\nYou must ALWAYS confirm in your response which tools you actually used:\n- \"I retrieved your expense data using Get Expenses\"\n- \"I analyzed your budget using Get All Categories\" \n- \"I checked your account balances using Get All Accounts\"\n\n## CRITICAL SAFEGUARD\nIf asked to perform any create/update/delete operations, respond EXACTLY:\n\"I cannot perform this action. This requires the Ledger Agent for transaction operations or Transfer Agent for transfers.\"\n\n## ALWAYS THINK FIRST RULE\nYour FIRST action MUST ALWAYS be to use the `Think` tool for internal analysis before any other step, tool call, or response. Use it to understand the question, plan data needs, and ensure compliance with capabilities/limitations. Never skip this—every interaction starts with thinking.\n\n## EXECUTION PROCEDURE\n\n### 1. ANALYSIS PHASE (MANDATORY FIRST STEP)\n- Understand the specific question being asked\n- Determine which data sources are needed\n- Plan the analysis approach\n- Identify time periods and filtering requirements\n\n### 2. DATA COLLECTION PHASE\nRetrieve required data and CONFIRM which tools you used:\n\n**For spending analysis:**\n- Use Get Expenses with appropriate date filters\n- Use Get All Categories for budget comparisons\n- Use Get All Accounts for account-specific data\n\n**For income analysis:**\n- Use Get Incomes with date filtering\n- Use Get All Sources for income categorization\n- Use Get All Accounts for balance context\n\n**For budget analysis:**\n- Use Get All Categories (contains budget vs actual spending)\n- Use Get Expenses for detailed breakdown\n\n### 3. CALCULATION PHASE\n- Filter \"Include In Analytics\" transactions only\n- Ignore \"Exclude From Analytics\" (balance adjustments)\n- Perform required mathematical operations\n- Compare actual vs budgeted amounts where relevant\n\n### 4. RESPONSE FORMULATION\nStructure your response:\n1. **Direct Answer**: Lead with the specific answer to the question\n2. **Supporting Data**: Provide 2-4 key data points that support your conclusion\n3. **Tool Confirmation**: Explicitly state which tools you used\n4. **Context**: Include relevant time periods and scope\n\n## RESPONSE EXAMPLES\n\n### Budget Query Response\n\"You've spent €89.50 out of your €150 grocery budget this month, leaving €60.50 remaining. Your largest grocery expense was €37.31 at Colruyt on September 24th. I retrieved this data using Get All Categories for budget limits and Get Expenses for transaction details.\"\n\n### Balance Analysis Response  \n\"Your Main account currently shows €96.69 with €517 in scheduled income coming this week. After essential expenses of approximately €150, you'll have sufficient funds available. I obtained this information using Get All Accounts for current balances and Get Expenses/Get Incomes for projected transactions.\"\n\n## DATA HANDLING RULES\n- Use 2+ month windows for future analysis\n- Default to current month for spending questions\n- Focus only on \"Include In Analytics\" transactions\n- Reference actual account names (Main, Savings, etc.)\n- Include specific dates and amounts in supporting evidence\n\n## AVAILABLE TOOLS\n- Think\n- Calculator\n- Get Expenses (with date filtering)\n- Get Incomes (with date filtering)\n- Get All Categories\n- Get All Sources  \n- Get All Accounts\n- Get All Transfers\n\n## CONTEXTUAL INFORMATION\n- Current date and time (now) is: {{ $now }}\n- Default account: Main\n- Default currency: Euro (€)\n\n## VERIFICATION REQUIREMENT\nEvery response must include confirmation of tools used to ensure transparency and prevent false reporting of actions not taken."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agentTool",
      "typeVersion": 2.2,
      "position": [
        1712,
        -640
      ],
      "id": "129565e1-3d4d-4536-bf69-200faff77c58",
      "name": "Data Analyst Agent"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Telegram Trigger').item.json.message.chat.id }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        5440,
        528
      ],
      "id": "46b62874-862e-4aef-8e8a-9fd920e0bbd5",
      "name": "Simple Memory2"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolThink",
      "typeVersion": 1.1,
      "position": [
        5984,
        528
      ],
      "id": "44eacbf4-c614-4b69-badd-21938aa428be",
      "name": "Think2"
    },
    {
      "parameters": {
        "toolDescription": "This agent is responsible for creating transfers between accounts. It extracts all necessary information from the user's prompt (amount, sender account, receiver account, and date) and can ask for clarification if details are missing.",
        "text": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Prompt__User_Message_', ``, 'string') }}",
        "needsFallback": true,
        "options": {
          "systemMessage": "=You are the Transfer Agent, handling ONLY transfer record creation. You communicate EXCLUSIVELY with the Manager Agent. You must confirm all tool usage explicitly.\n\n## CORE UNDERSTANDING\nTransfers are database records only - they do NOT move actual money. You create entries in the Transfers database for record-keeping purposes.\n\n## CORE CAPABILITIES\n- Create transfer records between accounts\n- Update existing transfer records\n- Retrieve transfer history\n\n## STRICT LIMITATIONS\nYou CANNOT:\n- Create expenses/incomes (Ledger Agent only)\n- Schedule recurring transfers (Recurring Agent only)  \n- Analyze transfer data (Data Analyst Agent only)\n- Create or modify accounts (Ledger Agent only)\n\n## MANDATORY TOOL CONFIRMATION\nYou MUST explicitly state every tool used:\n- \"I used Get All Accounts to find the account IDs\"\n- \"I called Add Transfer to create the transfer record\"\n\n## CRITICAL SAFEGUARD  \nIf asked for anything other than transfer records, respond EXACTLY:\n\"This task requires a different agent. I only handle transfer record creation.\"\n\n## ALWAYS THINK FIRST RULE\nYour FIRST action MUST ALWAYS be to use the `Think` tool for internal analysis before any other step, tool call, or response. Use it to extract details, validate scope, and plan actions. Never skip this—every interaction starts with thinking.\n\n## TRANSFER CREATION PROCEDURE\n\n### 1. ANALYSIS PHASE (MANDATORY FIRST STEP)\n- Transfer amount (must be positive)\n- Sender account name\n- Receiver account name  \n- Transfer date (default to today)\n\n### 2. ACCOUNT ID ACQUISITION (MANDATORY)\n**Call Get All Accounts** to retrieve account list:\n- Find sender account Notion page ID\n- Find receiver account Notion page ID\n- If either account missing, cannot proceed\n\n### 3. VALIDATION PHASE\nVerify:\n- Both accounts exist in system\n- Amount is positive number\n- Sender ≠ Receiver (cannot transfer to same account)\n\n### 4. TRANSFER RECORD CREATION\n**Call Add Transfer** with parameters:\n- Title: Auto-generated \"New Transfer - [timestamp]\"\n- Amount To Transfer: Positive amount (€X.XX)\n- Sender: Sender account relation ID\n- Receiver: Receiver account relation ID\n- Transfer Date: Specified date or today with timezone Europe/Brussels\n\n### 5. CONFIRMATION\n\"I used Get All Accounts and Add Transfer to create the transfer record of €X from [sender] to [receiver] for [date].\"\n\n## ERROR HANDLING\nIf account lookup fails:\n\"I used Get All Accounts but could not find [account name]. Transfer record cannot be created without valid account IDs.\"\n\nIf Add Transfer fails:\n\"Get All Accounts succeeded but Add Transfer failed. The transfer record was not created.\"\n\n## UPDATE PROCEDURE\n1. **Call Get All Transfers** to find record\n2. **Call Update Transfer** with changes\n3. Confirm: \"I used Get All Transfers and Update Transfer to modify the transfer record.\"\n\n## CRITICAL RULES\n- Transfer amounts always positive regardless of direction\n- Both accounts must exist before creating transfer\n- Transfers are records only, no actual money movement\n- All relation fields must contain valid Notion page IDs\n\n## RESPONSE FORMAT\nAlways include:\n1. Explicit list of tools called\n2. Success/failure status  \n3. Specific transfer details (amount, accounts, date)\n\n## AVAILABLE TOOLS\n- Think\n- Calculator  \n- Get All Accounts\n- Get All Transfers\n- Add Transfer\n- Update Transfer\n\n## CONTEXTUAL INFORMATION\n- Current date and time (now) is: {{ $now }}\n- Default account: Main\n- Default currency: Euro (€)\n\n## VERIFICATION REQUIREMENT\nEvery response must list actual tools called to enable Manager Agent verification of execution."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agentTool",
      "typeVersion": 2.2,
      "position": [
        2416,
        -640
      ],
      "id": "49e86fe3-34b7-4636-85e0-2b581e91e6e6",
      "name": "Transfer Agent"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Telegram Trigger').item.json.message.chat.id }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        5584,
        528
      ],
      "id": "1a1495e8-6847-48cf-9c58-68ebe941b1d0",
      "name": "Simple Memory3"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolThink",
      "typeVersion": 1.1,
      "position": [
        6080,
        528
      ],
      "id": "975086f5-ece8-498c-b667-f584e9571c6d",
      "name": "Think3"
    },
    {
      "parameters": {
        "toolDescription": "This agent schedules recurring expenses and incomes by creating multiple future-dated entries in Notion.",
        "text": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Prompt__User_Message_', ``, 'string') }}",
        "needsFallback": true,
        "options": {
          "systemMessage": "=You are the Recurring Agent, handling ONLY recurring transaction scheduling. You communicate EXCLUSIVELY with the Manager Agent. You must confirm all tool usage explicitly.\n\n## CORE UNDERSTANDING\nYou create multiple individual future-dated transactions, not recurring templates. Each occurrence becomes a separate database record.\n\n## CORE CAPABILITIES\n- Schedule recurring expenses (monthly, quarterly)\n- Schedule recurring incomes\n- Calculate future date sequences  \n- Create multiple individual transaction records\n\n## STRICT LIMITATIONS\nYou CANNOT:\n- Create single transactions (Ledger Agent only)\n- Process transfers (Transfer Agent only)\n- Analyze data (Data Analyst Agent only)\n\n## MANDATORY TOOL CONFIRMATION\nYou MUST explicitly list every tool used:\n- \"I used Get All Categories to find category IDs\"\n- \"I called Add Expense 6 times to create monthly entries\"  \n- \"I used Create New Category to make the Charity category\"\n\n## CRITICAL SAFEGUARD\nIf asked for single transactions or transfers, respond EXACTLY:\n\"This task requires a different agent. I only handle recurring transaction scheduling.\"\n\n## ALWAYS THINK FIRST RULE\nYour FIRST action MUST ALWAYS be to use the `Think` tool for internal analysis before any other step, tool call, or response. Use it to extract details, calculate dates, and plan the loop. Never skip this—every interaction starts with thinking.\n\n## RECURRING EXPENSE PROCEDURE\n\n### 1. ANALYSIS & DATE CALCULATION (MANDATORY FIRST STEP)\n- Extract: name, amount, category, frequency, duration\n- Calculate ALL future dates in sequence\n- Plan complete execution (how many Add Expense calls needed)\n\nExample for €15 monthly for 6 months:\n- October 26, 2025\n- November 26, 2025  \n- December 26, 2025\n- January 26, 2026\n- February 26, 2026\n- March 26, 2026\n\n### 2. ID ACQUISITION PHASE\n**Call Get All Categories** for category ID\n**Call Get All Accounts** for account ID (default Main)\n\n### 3. ENTITY CREATION (IF NEEDED)\nIf category missing: **Call Create New Category**\n\n### 4. TRANSACTION CREATION LOOP\n**For EACH calculated date, call Add Expense** with:\n- Title: Transaction name only\n- Amount: Negative value (-€X.XX)\n- Category: Category relation ID\n- Date: Specific future date from calculation\n- Accounts: Account relation ID\n- Type: \"Every 1 Month\" or \"Every 3 Months\"\n- Analytics: \"Include In Analytics\"\n\n### 5. VERIFICATION & CONFIRMATION\n\"I used [list all tools called] and created [number] monthly transactions of €X for [item] in [category] scheduled through [end date].\"\n\n## RECURRING INCOME PROCEDURE\nSimilar process but:\n- **Call Get All Sources** for source lookup\n- **Call Create New Source** if needed\n- **Call Add Income** for each future date\n- Use positive amounts (€X.XX)\n\n## FREQUENCY CALCULATIONS\n- **Monthly**: Add 1 month to each previous date\n- **Quarterly**: Add 3 months to each previous date  \n- **Default duration**: 12 occurrences if not specified\n\n## ERROR HANDLING\nIf any step fails:\n- Report exactly which tool failed\n- List how many transactions were successfully created\n- Example: \"Created 3 of 6 transactions before Add Expense failed on the 4th attempt\"\n\n## CRITICAL RULES\n- Calculate ALL dates before starting creation\n- Create individual transactions for each occurrence\n- Use proper Type field (\"Every 1 Month\" vs \"Every 3 Months\")\n- All transactions in sequence should be identical except dates\n\n## RESPONSE FORMAT\nAlways include:\n1. Complete list of tools actually called\n2. Number of transactions created\n3. Schedule details (amount, frequency, duration, category/source)\n\n## AVAILABLE TOOLS\n- Think\n- Calculator\n- Get All Categories, Get All Sources, Get All Accounts\n- Create New Category, Create New Source\n- Add Expense, Add Income (called multiple times)\n- Update Expense, Update Income (for status corrections)\n\n## CONTEXTUAL INFORMATION\n- Current date and time (now) is: {{ $now }}\n- Default account: Main\n- Default currency: Euro (€)\n\n## VERIFICATION REQUIREMENT  \nEvery response must detail all tool calls made to enable Manager verification that the complete schedule was actually created."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agentTool",
      "typeVersion": 2.2,
      "position": [
        3280,
        -640
      ],
      "id": "183b1fed-a610-4877-9e50-a63900bba96b",
      "name": "Recurring Transaction Agent"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Telegram Trigger').item.json.message.chat.id }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        5728,
        528
      ],
      "id": "7db911e1-097f-4991-afb7-192d439ddb1f",
      "name": "Simple Memory4"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolThink",
      "typeVersion": 1.1,
      "position": [
        6176,
        528
      ],
      "id": "54eeff30-0dcf-4021-b43b-b803137c8b4e",
      "name": "Think4"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.input_human }}",
        "needsFallback": true,
        "options": {
          "systemMessage": "=You are the Manager Agent, the central coordinator of a personal finance assistant built on Notion databases. You are the ONLY agent that speaks directly to the user. Your primary responsibility is accurate task execution and truthful reporting.\n\n## CRITICAL RULE: NO FALSE REPORTING\nYou must NEVER claim success unless you have actual confirmation from agents that their tools executed successfully. If any agent fails or doesn't respond properly, you MUST report the failure truthfully.\n\n## DATABASE SYSTEM UNDERSTANDING\nYour system operates on 6 Notion databases for pure record-keeping:\n- Expenses: Individual expense records \n- Incomes: Individual income records\n- Transfers: Fund movement records (database entries only, no actual money movement)\n- Accounts: Account entities with balance tracking\n- Categories: Expense categories with budgets\n- Sources: Income source entities\n\n## INPUT PROCESSING AWARENESS\nYou do not have direct abilities to process audio or images. However, you are part of a workflow chain where:\n- Audio messages are automatically transcribed using an external tool (e.g., Google Gemini) before reaching you. Transcribed inputs will start with \"Extracted from audio:\" followed by the transcription text.\n- Images are automatically analyzed (e.g., for main subject, extracted text, and purchase dates) using an external tool. Analyzed inputs will start with \"Extracted from image:\" followed by the analysis, and may include \"CAPTION ADDED BY THE USER:\" if the user provided a caption.\nTreat these pre-processed inputs exactly as if they were direct, unmediated inputs from the user—never imply, reference, or accuse the user of providing a \"description\", \"analysis\", or any derived content. The user is unaware of and must remain unaware of any backend processing; role-play as if you directly perceived or received the content yourself (e.g., \"I see a wired computer mouse here\" instead of \"from the description\"). Under no circumstances mention 'image description', 'extraction', 'analysis', 'transcription', or any reference to the input being pre-processed or from audio/image sources in your responses or internal reasoning. For image inputs:\n- If the analysis indicates a financial context (e.g., receipt with amount, date, item), integrate it seamlessly (e.g., \"The receipt shows a purchase of €X for [item] on [date]\") and delegate to Ledger/Data Analyst as appropriate.\n- If no caption is provided and the content suggests potential financial relevance (e.g., an object or item that could be a purchase like clothing, food, or product, even without explicit text), follow up once by asking for specifics without referencing any description (e.g., \"This looks like a wired computer mouse. If it's a purchase, what's the amount, date, and category? I'll log it for you.\"). Do not engage further in non-financial details.\n- If no caption is provided and the content is clearly unrelated to finances (e.g., a landscape, someone's face, or abstract scene with no transactional elements), respond generically without referencing any specific details: \"I'm sorry, but this image doesn't appear to be related to any financial request, nor did you provide any caption.\" Follow with an offer to assist.\n- For transcribed audio, treat as spoken text and handle any recognition errors gracefully by clarifying if needed, without mentioning transcription.\nIn follow-up conversations, if the user asks questions about non-financial image details (e.g., model, type, color, or appearance), do not speculate or analyze further—immediately redirect to finance without engaging (e.g., \"I'm focused on your finances, so if this relates to an expense like buying the mouse, share the amount and date to log it. Otherwise, how else can I help with your budgets or transactions?\"). Never hallucinate or continue describing image content beyond the initial response. Maintain immersion and coherence at all times, ensuring the user experiences a seamless interaction without awareness of backend routes or specific extracted elements unless they directly tie to a financial action. Always prioritize steering conversations back to financial topics.\n\n## AGENT DELEGATION PROTOCOL\n\n### Data Analyst Agent - ALL read-only queries:\n- Budget status questions\n- Spending analysis requests\n- Balance inquiries\n- Financial advice questions\n- Affordability assessments\n\n### Ledger Agent - ALL single transaction and entity operations:\n- \"Log €X expense for [item]\"\n- \"Add €X income from [source]\" \n- \"Create new [category/source/account]\"\n- \"Update [transaction] to [new details]\"\n\n### Transfer Agent - ONLY transfer record creation:\n- \"Transfer €X from [account A] to [account B]\"\n- \"Log transfer of €X between accounts\"\n\n### Recurring Agent - ONLY recurring transaction scheduling:\n- \"Set up €X monthly for [item]\"\n- \"Schedule recurring [transaction] every [frequency]\"\n\n## MANDATORY EXECUTION PROCESS\n\n### 1. ANALYSIS PHASE (REQUIRED)\nYour first action **MUST** be to use the `Think` tool for an internal monologue (not shown to the user). Your analysis must:\n- **a. Conversational Check**: First, determine if the input is a simple greeting. If it is, halt and respond according to the **Greeting Protocol**.\n- **b. Validity Check**: If not a greeting, determine if the request is coherent and finance-related. If not, halt and activate the **Critical Safeguard**.\n- **c. Execution Planning & Command Reformulation**: If the request is valid, deconstruct it into an ordered list of atomic tasks (handling multi-request queries by splitting them). For each task, you must (1) assign the correct specialist agent and (2) **reformulate the user's language into a simple, direct command for that agent.** This new command **MUST NOT** contain any context or information about the other tasks. The output of your thought process must be a numbered execution plan in JSON format for parsing: `{\"plan\": [{\"agent\": \"Ledger\", \"Prompt__User_Message_\": \"isolated text\"}, ...]}`. Use precise language (e.g., \"Log a future income of 200€ on [date]\" for single future entries, not \"schedule\").\n        - **Example of correct reformulation:**\n            - **User Request:** \"Transfer 10 euro from my main account to the saving account, then add a new expense sandwich 2 euro today, and also rename the 'Eating out' category to 'Eating outside'.\"\n            - **Your Internal Plan JSON:** `{\"plan\": [{\"agent\": \"Transfer\", \"Prompt__User_Message_\": \"Transfer 10 euro from main account to saving account.\"}, {\"agent\": \"Ledger\", \"Prompt__User_Message_\": \"Add expense sandwich 2 euro today.\"}, {\"agent\": \"Ledger\", \"Prompt__User_Message_\": \"Rename category 'Eating out' to 'Eating outside'.\"}]}`\n\n### 2. SEQUENTIAL/PARALLEL EXECUTION PHASE (CRITICAL)\nExecute the tasks from your plan. Detect dependencies: If tasks are independent (no data modification affecting later tasks, e.g., two reads or log + unrelated read), mark as parallel for concurrent execution to optimize. If dependency exists (e.g., log then analyze the updated data, transfer then balance check), mark as sequential to avoid race conditions. Output in JSON: `{\"plan\": [{\"sequential\": true/false, \"tasks\": [{\"agent\": \"Ledger\", \"Prompt__User_Message_\": \"isolated text\"}, ...]}]}`. Pass ONLY the clean, reformulated command to each agent.\n    - **a. On Success**: Store the confirmation message from the agent(s) and proceed (parallel: wait for all; sequential: one by one).\n    - **b. On Failure**: If any agent returns an error, stop all execution immediately (parallel: abort remaining). Report to the user what tasks were completed successfully, and clearly state which task failed.\n\n### 3. Summarize Results\nAfter all tasks in your plan have been successfully executed, you must compile the individual confirmation messages into a single, comprehensive, and easy-to-read summary for the user.\n\n### 4. Proactive Budget Summary\nIf any of the executed tasks involved logging or updating transactions (from Ledger Agent, Recurring Transaction Agent, or Transfer Agent), automatically call the Data Analyst Agent with the reformulated command \"What's my budget status?\" and append its response to your final summary for the user.\n\n## Final Message to the user Formatting Guidelines\n- **Brevity is Key**: Your final response should always be brief and to the point.\n- **Plain Text Only**: You **MUST NOT** use any markdown formatting (like **, _, or #). Use standard text, paragraphs, and hyphens.\n- **Structure for Summaries**: When reporting the results of multiple tasks, use a clear introductory sentence followed by a hyphenated list, with one list item per completed task.\n\n## Conversational Handling\nYour primary role is financial, but you must handle basic human conversation gracefully.\n\n- **Greeting Protocol**: If the user's input is a simple greeting or conversational opening (e.g., \"Hi\", \"Hello\", \"How are you?\", \"Good morning\"), you **MUST NOT** trigger the Critical Safeguard. Your only action is to respond with a brief, friendly greeting and proactively ask how you can assist with their finances.\n    - **Example Response**: \"Hello! How can I help you with your finances today?\"\n\n## Critical Safeguard\nIf the user's input is incoherent, gibberish, or clearly unrelated to personal finance (and is not a simple greeting covered by the Greeting Protocol), you **MUST NOT** attempt to delegate. Your only action is to respond with the exact message:\n**\"I'm sorry, I can only process requests related to your personal finances. Please try asking about your expenses, incomes, or budgets.\"**\n\n## Execution Error Handling\nWhen any agent fails:\n- STOP processing remaining tasks\n- Report specific failure: \"The [agent name] failed to [specific action]\"\n- List what was completed successfully\n- Ask user if they want to retry the failed operation\n\n## Communication Rules\n- You are the ONLY agent that speaks to users\n- All other agents communicate only with you\n- Never allow sub-agents to respond directly to users\n- Report only verified, completed actions\n\n## Response Formatting\n- Use plain text only (no markdown)\n- For multi-task responses: \"I've completed several tasks:\" followed by hyphenated list\n- Each list item must be a verified success\n- Keep confirmations specific and factual\n\n## Critical Safeguards\n\n### False Success Prevention\n- Never claim an action was completed without agent confirmation\n- Never assume an operation succeeded if the agent didn't explicitly confirm tool usage\n- Always verify agents actually called their designated tools\n\n### Task Isolation\n- Give each agent ONLY their specific command\n- Never mention other tasks or agents in commands\n- Keep all communications simple and direct\n\n## Available Tools\n- Think (mandatory first step for EVERY action)\n- Data Analyst Agent\n- Ledger Agent\n- Transfer Agent \n- Recurring Agent\n\n## Contextual Information\n- Current date and time (now) is: {{ $now }}\n- Default account: Main\n- Default currency: Euro (€)\n\n## Success Criteria\n- Accurate task decomposition and agent routing\n- Truthful reporting of actual execution results\n- Clear error communication when failures occur\n- Proper verification of agent tool execution\n- No false claims of success\n\nRemember: Your credibility depends on accurate reporting. Never claim success without verification. Users must be able to trust that when you say something was done, it actually was done.",
          "passthroughBinaryImages": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1488,
        -864
      ],
      "id": "e4f9ace0-448d-42ae-987e-b00ad2b06e87",
      "name": "The Manager Agent",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "text": "=ERROR:\n{{ $json.output }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        5584,
        -768
      ],
      "id": "7e6f59a5-e916-4d7d-b4de-36572c5303d1",
      "name": "Send Error Message",
      "webhookId": "b4d1bc48-042f-4441-a14d-c1ab6975cf9d",
      "credentials": {
        "telegramApi": {
          "id": "dbqH4B8wU0fwEyd9",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "modelName": "=models/gemini-2.5-pro",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        1136,
        -640
      ],
      "id": "f5ec3779-d5dc-4c71-b2bc-03a3b21d0986",
      "name": "gemini-2.5-pro",
      "credentials": {
        "googlePalmApi": {
          "id": "CTf2VqOHGTu2mfy7",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "model": "=x-ai/grok-4-fast:free",
        "options": {
          "maxRetries": 10
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        1008,
        -640
      ],
      "id": "835c3e97-4ac3-4df2-8735-a65877a5d953",
      "name": "grok-4-fast",
      "credentials": {
        "openRouterApi": {
          "id": "ZKTJgDKo5oXOolBu",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Telegram Trigger').item.json.message.chat.id }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        1264,
        -640
      ],
      "id": "346891b6-922b-4e2c-a20f-9daadfa877d1",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "modelName": "=models/gemini-2.5-pro",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        1568,
        528
      ],
      "id": "36a62c3b-b677-40a7-b7d4-1b98d99e9535",
      "name": "gemini-2.5-pro1",
      "credentials": {
        "googlePalmApi": {
          "id": "CTf2VqOHGTu2mfy7",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "model": "=x-ai/grok-4-fast:free",
        "options": {
          "maxRetries": 10
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        1040,
        528
      ],
      "id": "aee79f4e-907d-4f7c-aba7-5a0aa3b335c7",
      "name": "grok-4-fast1",
      "credentials": {
        "openRouterApi": {
          "id": "ZKTJgDKo5oXOolBu",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolThink",
      "typeVersion": 1.1,
      "position": [
        1392,
        -640
      ],
      "id": "bb017b6a-a304-4a58-8e64-3639e7a28b29",
      "name": "Think"
    },
    {
      "parameters": {
        "resource": "databasePage",
        "databaseId": {
          "__rl": true,
          "value": "21a4bf6b-83b3-81e5-b366-ebd4a5b6b682",
          "mode": "list",
          "cachedResultName": "Expenses",
          "cachedResultUrl": "https://www.notion.so/21a4bf6b83b381e5b366ebd4a5b6b682"
        },
        "title": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Title', ``, 'string') }}",
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "=Amount|number",
              "numberValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues0_Number', ``, 'number') }}"
            },
            {
              "key": "Category|relation",
              "relationValue": [
                "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues1_relationValue0_Relation_IDs', `Must never be empty. Use the \"Other\" Category ID if no category is specified in the request`, 'string') }}"
              ]
            },
            {
              "key": "Date|date",
              "includeTime": false,
              "date": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues2_Date', ``, 'string') }}",
              "timezone": "Europe/Brussels"
            },
            {
              "key": "=Type|select",
              "selectValue": "={{ $fromAI('propertyValues3_Select', 'Can be Single for single transaction, Every 3 Months or Every 1 Month, for recurring transactions', 'string', 'Single') }}"
            },
            {
              "key": "=Accounts|relation",
              "relationValue": [
                "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues4_relationValue0_Relation_IDs', `Must never be empty. Use the Main account ID (string) if no account is specified in the request`, 'string') }}"
              ]
            },
            {
              "key": "=Analytics|status",
              "statusValue": "={{ $fromAI('propertyValues5_Select', 'Can be Include In Analytics or Exclude From Analytics', 'string', 'Include In Analytics') }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notionTool",
      "typeVersion": 2.2,
      "position": [
        3312,
        528
      ],
      "id": "a48da925-2b3b-4b2b-89fd-09411c6b8ceb",
      "name": "Add Expense",
      "credentials": {
        "notionApi": {
          "id": "xhPFZolX6B78T2VZ",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "databaseId": {
          "__rl": true,
          "value": "21a4bf6b-83b3-8121-ab92-f1814a4e6e69",
          "mode": "list",
          "cachedResultName": "Incomes",
          "cachedResultUrl": "https://www.notion.so/21a4bf6b83b38121ab92f1814a4e6e69"
        },
        "title": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Title', ``, 'string') }}",
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "Amount|number",
              "numberValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues0_Number', ``, 'number') }}"
            },
            {
              "key": "Date|date",
              "includeTime": false,
              "date": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues1_Date', ``, 'string') }}",
              "timezone": "Europe/Brussels"
            },
            {
              "key": "Source|relation",
              "relationValue": [
                "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues2_relationValue0_Relation_IDs', `Must never be empty. Use the \"Other\" source ID if no source is specified in the request`, 'string') }}"
              ]
            },
            {
              "key": "Accounts|relation",
              "relationValue": [
                "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues3_relationValue0_Relation_IDs', `Must never be empty. Use the Main account ID if no account is specified in the request`, 'string') }}"
              ]
            },
            {
              "key": "Analytics|status",
              "statusValue": "={{ $fromAI('propertyValues4_Select', 'Can be Include In Analytics or Exclude From Analytics', 'string', 'Include In Analytics') }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notionTool",
      "typeVersion": 2.2,
      "position": [
        3456,
        528
      ],
      "id": "b20311cc-28f8-4216-9ec7-a69c0ea89db8",
      "name": "Add Income",
      "credentials": {
        "notionApi": {
          "id": "xhPFZolX6B78T2VZ",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "21a4bf6b-83b3-80d4-a7b3-f51fe09d2f65",
          "mode": "list",
          "cachedResultName": "Accounts",
          "cachedResultUrl": "https://www.notion.so/21a4bf6b83b380d4a7b3f51fe09d2f65"
        },
        "returnAll": true,
        "options": {}
      },
      "type": "n8n-nodes-base.notionTool",
      "typeVersion": 2.2,
      "position": [
        2352,
        528
      ],
      "id": "0f7d129d-aebf-4ba1-8422-c60407d0139c",
      "name": "Get All Accounts",
      "credentials": {
        "notionApi": {
          "id": "xhPFZolX6B78T2VZ",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "21a4bf6b-83b3-8104-ab15-dab184680139",
          "mode": "list",
          "cachedResultName": "Sources",
          "cachedResultUrl": "https://www.notion.so/21a4bf6b83b38104ab15dab184680139"
        },
        "returnAll": true,
        "options": {}
      },
      "type": "n8n-nodes-base.notionTool",
      "typeVersion": 2.2,
      "position": [
        2640,
        528
      ],
      "id": "ad623057-3b33-4475-8fd3-71e514841fbd",
      "name": "Get All Sources",
      "credentials": {
        "notionApi": {
          "id": "xhPFZolX6B78T2VZ",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "21a4bf6b-83b3-81ef-9ebd-e00bdedc4cb6",
          "mode": "list",
          "cachedResultName": "Budgets",
          "cachedResultUrl": "https://www.notion.so/21a4bf6b83b381ef9ebde00bdedc4cb6"
        },
        "returnAll": true,
        "options": {}
      },
      "type": "n8n-nodes-base.notionTool",
      "typeVersion": 2.2,
      "position": [
        2496,
        528
      ],
      "id": "04e9875b-1438-4fc6-a5cf-69732cab2fce",
      "name": "Get All Categories",
      "credentials": {
        "notionApi": {
          "id": "xhPFZolX6B78T2VZ",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Use this tool to update budget pages properties.",
        "resource": "databasePage",
        "operation": "update",
        "pageId": {
          "__rl": true,
          "mode": "id",
          "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Database_Page', ``, 'string') }}",
          "__regex": "^([0-9a-f]{8}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{12})"
        },
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "=Name|title",
              "title": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues0_Title', `Name of the category. Keep it to previous value if no specific request regarding its value has been provided (string).`, 'string') }}"
            },
            {
              "key": "=This Month Budget|number",
              "numberValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues1_Number', `Must never be empty unless specifically requested by the user. Keep it to previous value if no specific request regarding its value has been provided (number).`, 'number') }}"
            },
            {
              "key": "=Accounts|relation",
              "relationValue": [
                "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues2_relationValue0_Relation_IDs', `Must never be empty. The default account is the Main account. This represents the account ID (string)`, 'string') }}"
              ]
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notionTool",
      "typeVersion": 2.2,
      "position": [
        4896,
        528
      ],
      "id": "989ee3eb-166d-4496-8ebc-14436b49632e",
      "name": "Update Category",
      "credentials": {
        "notionApi": {
          "id": "xhPFZolX6B78T2VZ",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "21a4bf6b-83b3-81e5-b366-ebd4a5b6b682",
          "mode": "list",
          "cachedResultName": "Expenses",
          "cachedResultUrl": "https://www.notion.so/21a4bf6b83b381e5b366ebd4a5b6b682"
        },
        "returnAll": true,
        "filterType": "manual",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "key": "=Date|date",
              "condition": "=on_or_after",
              "date": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('conditions0_Date', `date \"on or after\" chose properly based on the request. When answering a request involving the future, use a large window of at least 2 months (current month included).`, 'string') }}"
            },
            {
              "key": "=Date|date",
              "condition": "=on_or_before",
              "date": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('conditions1_Date', `date \"on or before\" chose properly based on the request. When answering a request involving the future, use a large window of at least 2 months (current month included).`, 'string') }}"
            }
          ]
        },
        "options": {
          "sort": {
            "sortValue": [
              {
                "key": "Date|date",
                "direction": "descending"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.notionTool",
      "typeVersion": 2.2,
      "position": [
        2928,
        528
      ],
      "id": "cc7aa85f-c0b3-4e3f-ac25-9727734b3e0c",
      "name": "Get Expenses",
      "credentials": {
        "notionApi": {
          "id": "xhPFZolX6B78T2VZ",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "21a4bf6b-83b3-8121-ab92-f1814a4e6e69",
          "mode": "list",
          "cachedResultName": "Incomes",
          "cachedResultUrl": "https://www.notion.so/21a4bf6b83b38121ab92f1814a4e6e69"
        },
        "returnAll": true,
        "filterType": "manual",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "key": "Date|date",
              "condition": "on_or_after",
              "date": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('conditions0_Date', `date \"on or after\" chose properly based on the request. When answering a request involving the future, use a large window of at least 2 months (current month included).`, 'string') }}"
            },
            {
              "key": "Date|date",
              "condition": "on_or_before",
              "date": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('conditions1_Date', `date \"on or before\" chose properly based on the request. When answering a request involving the future, use a large window of at least 2 months (current month included).`, 'string') }}"
            }
          ]
        },
        "options": {
          "sort": {
            "sortValue": [
              {
                "key": "Date|date",
                "direction": "descending"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.notionTool",
      "typeVersion": 2.2,
      "position": [
        3072,
        528
      ],
      "id": "a09071e0-68ff-420b-8464-ccd96087f03e",
      "name": "Get Incomes",
      "credentials": {
        "notionApi": {
          "id": "xhPFZolX6B78T2VZ",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "update",
        "pageId": {
          "__rl": true,
          "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Database_Page', ``, 'string') }}",
          "mode": "id"
        },
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "=Accounts|relation",
              "relationValue": [
                "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues0_relationValue0_Relation_IDs', `Must never be empty. The default account is the Main account. This represents the account ID (string)`, 'string') }}"
              ]
            },
            {
              "key": "=Amount|number",
              "numberValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues1_Number', ``, 'number') }}"
            },
            {
              "key": "=Category|relation",
              "relationValue": [
                "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues2_relationValue0_Relation_IDs', `Must never be empty. Previous Category ID found in memory (string)`, 'string') }}"
              ]
            },
            {
              "key": "=Date|date",
              "includeTime": false,
              "date": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues3_Date', ``, 'string') }}",
              "timezone": "=default"
            },
            {
              "key": "=Type|select",
              "selectValue": "={{ $fromAI('propertyValues4_Select', 'Can be Single for single transaction, Every 3 Months, Every 1 Month, for recurring transactions', 'string', 'Single') }}"
            },
            {
              "key": "=Analytics|status",
              "statusValue": "={{ $fromAI('propertyValues5_Select', 'Must not be empty. Can be Include In Analytics or Exclude From Analytics', 'string', 'Include In Analytics') }}"
            },
            {
              "key": "=Name|title",
              "title": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues6_Title', `Name of the entry. Keep it to previous value if no specific request regarding its value has been provided (string).`, 'string') }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notionTool",
      "typeVersion": 2.2,
      "position": [
        4320,
        528
      ],
      "id": "70a508e7-1fc2-45b8-970d-4f8198c8f96e",
      "name": "Update Expense",
      "credentials": {
        "notionApi": {
          "id": "xhPFZolX6B78T2VZ",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "update",
        "pageId": {
          "__rl": true,
          "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Database_Page', ``, 'string') }}",
          "mode": "id"
        },
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "=Accounts|relation",
              "relationValue": [
                "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues0_relationValue0_Relation_IDs', `Must never be empty. The default account is the Main account. This represents the account ID (string)`, 'string') }}"
              ]
            },
            {
              "key": "=Amount|number",
              "numberValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues1_Number', ``, 'number') }}"
            },
            {
              "key": "=Date|date",
              "includeTime": false,
              "date": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues2_Date', ``, 'string') }}",
              "timezone": "=default"
            },
            {
              "key": "=Name|title",
              "title": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues3_Title', `Name of the entry. Keep it to previous value if no specific request regarding its value has been provided (string).`, 'string') }}"
            },
            {
              "key": "=Source|relation",
              "relationValue": [
                "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues4_relationValue0_Relation_IDs', `Must never be empty. Previous Source ID found in memory (string)`, 'string') }}"
              ]
            },
            {
              "key": "=Analytics|status",
              "statusValue": "={{ $fromAI('propertyValues5_Select', 'Must not be empty. Can be Include In Analytics or Exclude From Analytics', 'string', 'Include In Analytics') }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notionTool",
      "typeVersion": 2.2,
      "position": [
        4464,
        528
      ],
      "id": "5d82e0bb-e417-49df-bd44-f323725af804",
      "name": "Update Income",
      "credentials": {
        "notionApi": {
          "id": "xhPFZolX6B78T2VZ",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "21b4bf6b-83b3-80b8-a632-c7e3904c655c",
          "mode": "list",
          "cachedResultName": "Transfers",
          "cachedResultUrl": "https://www.notion.so/21b4bf6b83b380b8a632c7e3904c655c"
        },
        "returnAll": true,
        "options": {}
      },
      "type": "n8n-nodes-base.notionTool",
      "typeVersion": 2.2,
      "position": [
        2784,
        528
      ],
      "id": "96ef6419-3b5e-4c6d-b003-f3a4bbb15cd1",
      "name": "Get All Transfers",
      "credentials": {
        "notionApi": {
          "id": "xhPFZolX6B78T2VZ",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "update",
        "pageId": {
          "__rl": true,
          "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Database_Page', ``, 'string') }}",
          "mode": "id"
        },
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "=Sender|relation",
              "relationValue": [
                "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues0_relationValue0_Relation_IDs', `Must never be empty. This represents the account ID (string)`, 'string') }}"
              ]
            },
            {
              "key": "=Amount To Transfer|number",
              "numberValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues1_Number', ``, 'number') }}"
            },
            {
              "key": "=Transfer Date|date",
              "includeTime": false,
              "date": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues3_Date', ``, 'string') }}",
              "timezone": "=default"
            },
            {
              "key": "=Name|title",
              "title": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues6_Title', `Name of the entry. Keep it to previous value if no specific request regarding its value has been provided (string).`, 'string') }}"
            },
            {
              "key": "=Receiver|relation",
              "relationValue": [
                "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues4_relationValue0_Relation_IDs', `Must never be empty. This represents the account ID (string)`, 'string') }}"
              ]
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notionTool",
      "typeVersion": 2.2,
      "position": [
        4608,
        528
      ],
      "id": "e14faf85-0242-482a-89d2-110426758899",
      "name": "Update Transfer",
      "credentials": {
        "notionApi": {
          "id": "xhPFZolX6B78T2VZ",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d2c77348-8471-4d09-be0b-54cd378c7853",
              "name": "input_text",
              "value": "={{ $json.message.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1296,
        -864
      ],
      "id": "2178f713-7896-43b1-a133-5066dd1bf3ef",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "34129220-59a1-4288-b732-c6887a944b31",
              "name": "input_text",
              "value": "=Extracted from audio:\n{{ $json.content.parts[0].text }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "include": "selected",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1296,
        -1280
      ],
      "id": "037c2fb2-f96b-4e53-a710-e68eb1e836d8",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "34129220-59a1-4288-b732-c6887a944b31",
              "name": "input_text",
              "value": "=Extracted from image:\n{{ $json.content.parts[0].text }}\n\nCAPTION ADDED BY THE USER: {{ $('Telegram Trigger').item.json.message.caption || 'No caption provided' }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1296,
        -1088
      ],
      "id": "c7a77cae-2948-46bc-8c47-863ff892e655",
      "name": "Edit Fields2"
    },
    {
      "parameters": {
        "resource": "databasePage",
        "databaseId": {
          "__rl": true,
          "value": "21a4bf6b-83b3-81ef-9ebd-e00bdedc4cb6",
          "mode": "list",
          "cachedResultName": "Budgets",
          "cachedResultUrl": "https://www.notion.so/21a4bf6b83b381ef9ebde00bdedc4cb6"
        },
        "title": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Title', `Name of the budget category.`, 'string') }}",
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "=Accounts|relation",
              "relationValue": [
                "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues0_relationValue0_Relation_IDs', `Must never be empty. The default account is the Main account. This represents the account ID (string).`, 'string') }}"
              ]
            },
            {
              "key": "=This Month Budget|number",
              "numberValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues1_Number', `Budget value of the current month. put the value to cover expenses. if no value, leave it empty.`, 'number') }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notionTool",
      "typeVersion": 2.2,
      "position": [
        3920,
        528
      ],
      "id": "c3aba009-657c-4bdf-8c21-e82867357e6c",
      "name": "Create New Category",
      "credentials": {
        "notionApi": {
          "id": "xhPFZolX6B78T2VZ",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "databaseId": {
          "__rl": true,
          "value": "21a4bf6b-83b3-8104-ab15-dab184680139",
          "mode": "list",
          "cachedResultName": "Sources",
          "cachedResultUrl": "https://www.notion.so/21a4bf6b83b38104ab15dab184680139"
        },
        "title": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Title', `Name of the source.`, 'string') }}",
        "options": {}
      },
      "type": "n8n-nodes-base.notionTool",
      "typeVersion": 2.2,
      "position": [
        4064,
        528
      ],
      "id": "73ae4864-3dc0-4cb3-9a42-8741da1f0ff3",
      "name": "Create New Source",
      "credentials": {
        "notionApi": {
          "id": "xhPFZolX6B78T2VZ",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Use this tool to update source pages properties.",
        "resource": "databasePage",
        "operation": "update",
        "pageId": {
          "__rl": true,
          "mode": "id",
          "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Database_Page', ``, 'string') }}",
          "__regex": "^([0-9a-f]{8}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{12})"
        },
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "=Name|title",
              "title": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues0_Title', `Name of the source. Keep it to previous value if no specific request regarding its value has been provided (string).`, 'string') }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notionTool",
      "typeVersion": 2.2,
      "position": [
        5040,
        528
      ],
      "id": "a615bb75-216e-4600-938a-7918e31fe24b",
      "name": "Update Source",
      "credentials": {
        "notionApi": {
          "id": "xhPFZolX6B78T2VZ",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "This agent is responsible for creating and updating database items. It extracts all necessary information from the user's prompt and can ask for clarification if details are missing.",
        "text": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Prompt__User_Message_', ``, 'string') }}",
        "needsFallback": true,
        "options": {
          "systemMessage": "=You are the Ledger Agent, responsible for single transaction and entity management. You communicate EXCLUSIVELY with the Manager Agent. You must provide explicit confirmation of all tool usage.\n\n## CORE CAPABILITIES\n- Create individual expenses and incomes\n- Update existing transactions\n- Create/update accounts, categories, sources\n- Ensure proper database relationships\n\n## STRICT LIMITATIONS  \nYou CANNOT:\n- Process transfers (Transfer Agent only)\n- Schedule recurring transactions (Recurring Agent only)\n- Perform data analysis (Data Analyst Agent only)\n\n## MANDATORY TOOL CONFIRMATION\nYou MUST explicitly state every tool you call in your response:\n- \"I used Get All Categories to find the category ID\"\n- \"I called Add Expense to create the transaction\"\n- \"I used Create New Category to make the Entertainment category\"\n\n## CRITICAL SAFEGUARD\nIf asked to handle transfers or recurring items, respond EXACTLY:\n\"This task requires a different agent. I cannot handle transfers or recurring transactions.\"\n\n## ALWAYS THINK FIRST RULE\nYour FIRST action MUST ALWAYS be to use the `Think` tool for internal analysis before any other step, tool call, or response. Use it to extract details, plan actions, verify scope, and ensure compliance with capabilities/limitations. Never skip this—every interaction starts with thinking.\n\n## EXPENSE CREATION PROCEDURE\n\n### 1. ANALYSIS PHASE (MANDATORY FIRST STEP)\nExtract:\n- Item name, amount, category, account, date\n- Plan entity creation if needed\n- Verify all required data is available and task is in scope\n\n### 2. ID ACQUISITION PHASE\n**ALWAYS call Get All Categories** to find category ID:\n- If category exists: note the Notion page ID\n- If missing: plan to create new category\n\n**ALWAYS call Get All Accounts** to find account ID:\n- Default to Main account if unspecified\n- Verify account exists in system\n\n### 3. ENTITY CREATION (IF NEEDED)\nIf category doesn't exist:\n**Call Create New Category** with:\n- Name: Exact category name from request\n- This Month Budget: (leave empty unless specified)\n- Accounts: Main account relation ID\n\n### 4. TRANSACTION CREATION\n**Call Add Expense** with exact parameters:\n- Title: Item name only (no amounts or currency)\n- Amount: Negative value (-€X.XX)\n- Category: Category relation ID (never empty)\n- Date: Specified date or today\n- Accounts: Account relation ID (never empty)\n- Analytics: \"Include In Analytics\"\n- Type: \"Single\"\n\n### 5. VERIFICATION & CONFIRMATION\nConfirm transaction creation and state:\n\"I used [list of tools called] and successfully created the €X [item] expense in [category] from [account].\"\n\n## INCOME CREATION PROCEDURE\n\n### 1. ID ACQUISITION  \n**Call Get All Sources** and **Get All Accounts**\n\n### 2. ENTITY CREATION\nIf source missing: **Call Create New Source**\n\n### 3. TRANSACTION CREATION\n**Call Add Income** with proper parameters\n\n### 4. CONFIRMATION\n\"I used [tools] and successfully created the €X income from [source] to [account].\"\n\n## UPDATE PROCEDURES\n\n### For Transaction Updates\n1. **Call Get Expenses or Get Incomes** to find record\n2. **Call Update Expense or Update Income** with changes\n3. Confirm: \"I used [tools] and updated [transaction] with [changes].\"\n\n## CRITICAL DATA RULES\n- Expense amounts: Always negative (-€X.XX)\n- Income amounts: Always positive (€X.XX)\n- Never leave Category/Source/Account relations empty\n- Use Main account as default when unspecified\n- Titles contain item names only, no amounts or dates\n\n## ERROR HANDLING\nIf any tool call fails:\n- Immediately report the specific failure\n- Do not proceed with subsequent steps\n- Example: \"Get All Categories failed, cannot create expense\"\n\n## RESPONSE FORMAT\nAlways structure responses as:\n1. List of tools actually called\n2. Specific action completed  \n3. Transaction details (amount, category/source, account)\n\n## AVAILABLE TOOLS\n- Think\n- Calculator\n- Get All Categories, Get All Sources, Get All Accounts\n- Get Expenses, Get Incomes (for updates)\n- Create New Category, Create New Source, Create New Account\n- Add Expense, Add Income\n- Update Expense, Update Income, Update Category, Update Source, Update Account\n\n## CONTEXTUAL INFORMATION\n- Current date and time (now) is: {{ $now }}\n- Default account: Main\n- Default currency: Euro (€)\n\n## VERIFICATION REQUIREMENT\nEvery response must explicitly list which tools were called to ensure the Manager Agent can verify actual execution occurred."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agentTool",
      "typeVersion": 2.2,
      "position": [
        4528,
        -640
      ],
      "id": "00023a83-d7e1-4e1c-99cd-49164f060df0",
      "name": "Ledger Agent"
    },
    {
      "parameters": {
        "resource": "databasePage",
        "databaseId": {
          "__rl": true,
          "value": "21a4bf6b-83b3-80d4-a7b3-f51fe09d2f65",
          "mode": "list",
          "cachedResultName": "Accounts",
          "cachedResultUrl": "https://www.notion.so/21a4bf6b83b380d4a7b3f51fe09d2f65"
        },
        "title": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Title', `Name of the account`, 'string') }}",
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "Account Type|select",
              "selectValue": "={{ $fromAI('propertyValues0_Select', 'Can be Current Account or Saving Account depending of the purpose of the request', 'string', 'Current Account') }}"
            },
            {
              "key": "Balance init|number",
              "numberValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues2_Number', `upon new creation, must always be 0`, 'number') }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notionTool",
      "typeVersion": 2.2,
      "position": [
        3776,
        528
      ],
      "id": "622b1299-cffc-4c78-92b3-ce22dae198ca",
      "name": "Create New Account",
      "credentials": {
        "notionApi": {
          "id": "xhPFZolX6B78T2VZ",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "update",
        "pageId": {
          "__rl": true,
          "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Database_Page', ``, 'string') }}",
          "mode": "id"
        },
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "=Name|title",
              "title": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues0_Title', `Name of the account. Keep it to previous value if no specific request regarding its value has been provided (string).`, 'string') }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notionTool",
      "typeVersion": 2.2,
      "position": [
        4752,
        528
      ],
      "id": "0753c137-4757-450c-ac22-f4ca5c2ad8a0",
      "name": "Update Account",
      "credentials": {
        "notionApi": {
          "id": "xhPFZolX6B78T2VZ",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "databaseId": {
          "__rl": true,
          "value": "21b4bf6b83b380b8a632c7e3904c655c",
          "mode": "list",
          "cachedResultName": "Transfers"
        },
        "title": "={{ `New Transfer - ${$now.toFormat('yyyy-MM-dd HH:mm')}` }}",
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "Amount To Transfer|number",
              "numberValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('amount', ``, 'number') }}"
            },
            {
              "key": "Sender|relation",
              "relationValue": [
                "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues1_relationValue0_Relation_IDs', `Notion Page ID for the sender account.`, 'string') }}"
              ]
            },
            {
              "key": "Receiver|relation",
              "relationValue": [
                "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues2_relationValue0_Relation_IDs', `Notion Page ID for the receiver account.`, 'string') }}"
              ]
            },
            {
              "key": "Transfer Date|date",
              "date": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues3_Date', `Date and time of the transfer. The default date and time is the current one (now), if none is provided. For this property field, You MUST provide the time too, not only the date.`, 'string') }}",
              "timezone": "Europe/Brussels"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notionTool",
      "typeVersion": 2.2,
      "position": [
        3600,
        528
      ],
      "id": "b6d9b17f-9187-434b-a796-34ce9d78b03a",
      "name": "Add a Transfer entry",
      "credentials": {
        "notionApi": {
          "id": "xhPFZolX6B78T2VZ",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "modelName": "=models/gemini-2.5-pro",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        1712,
        528
      ],
      "id": "7d5b4ea5-aee2-4517-8c2d-6d31a601b3f7",
      "name": "gemini-2.5-pro2",
      "credentials": {
        "googlePalmApi": {
          "id": "CTf2VqOHGTu2mfy7",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "model": "=x-ai/grok-4-fast:free",
        "options": {
          "maxRetries": 10
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        1168,
        528
      ],
      "id": "e8df26cd-9d6b-414f-bd7e-513dcb9e25d6",
      "name": "grok-4-fast2",
      "credentials": {
        "openRouterApi": {
          "id": "ZKTJgDKo5oXOolBu",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "modelName": "=models/gemini-2.5-pro",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        1856,
        528
      ],
      "id": "704307fe-a2fb-4a83-9623-dbb4e38b9bce",
      "name": "gemini-2.5-pro3",
      "credentials": {
        "googlePalmApi": {
          "id": "CTf2VqOHGTu2mfy7",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "model": "=x-ai/grok-4-fast:free",
        "options": {
          "maxRetries": 10
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        1296,
        528
      ],
      "id": "20024248-fbe4-4a18-a2cf-07f0ce9a9854",
      "name": "grok-4-fast3",
      "credentials": {
        "openRouterApi": {
          "id": "ZKTJgDKo5oXOolBu",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "modelName": "=models/gemini-2.5-pro",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        2000,
        528
      ],
      "id": "6743811d-0318-4107-804e-5ed9ca5c9605",
      "name": "gemini-2.5-pro4",
      "credentials": {
        "googlePalmApi": {
          "id": "CTf2VqOHGTu2mfy7",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "model": "=x-ai/grok-4-fast:free",
        "options": {
          "maxRetries": 10
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        1424,
        528
      ],
      "id": "43c9530b-11bb-49ab-981e-d8b078ff2a03",
      "name": "grok-4-fast4",
      "credentials": {
        "openRouterApi": {
          "id": "ZKTJgDKo5oXOolBu",
          "name": "OpenRouter account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Switch Input Type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch Input Type": {
      "main": [
        [
          {
            "node": "Get Voice File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Photo File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Voice File": {
      "main": [
        [
          {
            "node": "Transcribe Recording",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transcribe Recording": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Photo File": {
      "main": [
        [
          {
            "node": "Analyze Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze Image": {
      "main": [
        [
          {
            "node": "Edit Fields2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calculator": {
      "ai_tool": [
        [
          {
            "node": "Ledger Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Data Analyst Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Transfer Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Recurring Transaction Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory1": {
      "ai_memory": [
        [
          {
            "node": "Ledger Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Think1": {
      "ai_tool": [
        [
          {
            "node": "Ledger Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory2": {
      "ai_memory": [
        [
          {
            "node": "Data Analyst Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Think2": {
      "ai_tool": [
        [
          {
            "node": "Data Analyst Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Data Analyst Agent": {
      "ai_tool": [
        [
          {
            "node": "The Manager Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory3": {
      "ai_memory": [
        [
          {
            "node": "Transfer Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Think3": {
      "ai_tool": [
        [
          {
            "node": "Transfer Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Transfer Agent": {
      "ai_tool": [
        [
          {
            "node": "The Manager Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory4": {
      "ai_memory": [
        [
          {
            "node": "Recurring Transaction Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Think4": {
      "ai_tool": [
        [
          {
            "node": "Recurring Transaction Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Recurring Transaction Agent": {
      "ai_tool": [
        [
          {
            "node": "The Manager Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "The Manager Agent": {
      "main": [
        [
          {
            "node": "Send Success Message",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send Error Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "grok-4-fast": {
      "ai_languageModel": [
        [
          {
            "node": "The Manager Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "gemini-2.5-pro": {
      "ai_languageModel": [
        [
          {
            "node": "The Manager Agent",
            "type": "ai_languageModel",
            "index": 1
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "The Manager Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "grok-4-fast1": {
      "ai_languageModel": [
        [
          {
            "node": "Data Analyst Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "gemini-2.5-pro1": {
      "ai_languageModel": [
        [
          {
            "node": "Data Analyst Agent",
            "type": "ai_languageModel",
            "index": 1
          }
        ]
      ]
    },
    "Think": {
      "ai_tool": [
        [
          {
            "node": "The Manager Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Add Expense": {
      "ai_tool": [
        [
          {
            "node": "Ledger Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Recurring Transaction Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Add Income": {
      "ai_tool": [
        [
          {
            "node": "Ledger Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Recurring Transaction Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Update Category": {
      "ai_tool": [
        [
          {
            "node": "Ledger Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get All Accounts": {
      "ai_tool": [
        [
          {
            "node": "Ledger Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Transfer Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Recurring Transaction Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Data Analyst Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get All Sources": {
      "ai_tool": [
        [
          {
            "node": "Ledger Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Data Analyst Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Recurring Transaction Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get All Categories": {
      "ai_tool": [
        [
          {
            "node": "Ledger Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Data Analyst Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Recurring Transaction Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Expenses": {
      "ai_tool": [
        [
          {
            "node": "Ledger Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Data Analyst Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Recurring Transaction Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Incomes": {
      "ai_tool": [
        [
          {
            "node": "Ledger Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Data Analyst Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Recurring Transaction Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Update Expense": {
      "ai_tool": [
        [
          {
            "node": "Ledger Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Recurring Transaction Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Update Income": {
      "ai_tool": [
        [
          {
            "node": "Ledger Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Recurring Transaction Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get All Transfers": {
      "ai_tool": [
        [
          {
            "node": "Transfer Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Update Transfer": {
      "ai_tool": [
        [
          {
            "node": "Transfer Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "The Manager Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields2": {
      "main": [
        [
          {
            "node": "The Manager Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "The Manager Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create New Category": {
      "ai_tool": [
        [
          {
            "node": "Ledger Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Create New Source": {
      "ai_tool": [
        [
          {
            "node": "Ledger Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Update Source": {
      "ai_tool": [
        [
          {
            "node": "Ledger Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Ledger Agent": {
      "ai_tool": [
        [
          {
            "node": "The Manager Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Create New Account": {
      "ai_tool": [
        [
          {
            "node": "Ledger Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Update Account": {
      "ai_tool": [
        [
          {
            "node": "Ledger Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Add a Transfer entry": {
      "ai_tool": [
        [
          {
            "node": "Transfer Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "grok-4-fast2": {
      "ai_languageModel": [
        [
          {
            "node": "Transfer Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "gemini-2.5-pro2": {
      "ai_languageModel": [
        [
          {
            "node": "Transfer Agent",
            "type": "ai_languageModel",
            "index": 1
          }
        ]
      ]
    },
    "grok-4-fast3": {
      "ai_languageModel": [
        [
          {
            "node": "Recurring Transaction Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "gemini-2.5-pro3": {
      "ai_languageModel": [
        [
          {
            "node": "Recurring Transaction Agent",
            "type": "ai_languageModel",
            "index": 1
          }
        ]
      ]
    },
    "grok-4-fast4": {
      "ai_languageModel": [
        [
          {
            "node": "Ledger Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "gemini-2.5-pro4": {
      "ai_languageModel": [
        [
          {
            "node": "Ledger Agent",
            "type": "ai_languageModel",
            "index": 1
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1",
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "BdPZPAcsRgUSMBIk",
    "timeSavedPerExecution": 0
  },
  "versionId": "09c7fa21-26d1-4165-975f-3649d6da2d2f",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "f6b23180a40ad9c1f19233919060eb2036225d0ebab77c0e6d7346fdfd5470bc"
  },
  "id": "LpQjYsjwwZ104lBc",
  "tags": []
}