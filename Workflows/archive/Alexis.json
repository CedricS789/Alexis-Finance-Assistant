{
  "name": "Alexis",
  "nodes": [
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [
        464,
        -896
      ],
      "id": "c38f7603-161d-4842-80bc-fa018340b602",
      "name": "Telegram Trigger",
      "webhookId": "f376e204-ebe4-4e9e-92db-35aaf13111f2",
      "credentials": {
        "telegramApi": {
          "id": "dbqH4B8wU0fwEyd9",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "loose",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.message.voice }}",
                    "rightValue": "",
                    "operator": {
                      "type": "object",
                      "operation": "exists",
                      "singleValue": true
                    },
                    "id": "a315ed3e-17bb-4063-b791-fa97de448bba"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Voice"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "loose",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "860634d1-8cbf-45bd-b57b-eae577613a73",
                    "leftValue": "={{ $json.message.photo }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Photo"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "loose",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "7a5b57c2-9a29-41c4-8a1e-da97c4f890ba",
                    "leftValue": "={{ $json.message.text }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Text"
            }
          ]
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.3,
      "position": [
        688,
        -912
      ],
      "id": "7d230621-7404-48e9-ab40-3d1903977f71",
      "name": "Switch Input Type"
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ $json.message.voice.file_id }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        912,
        -1280
      ],
      "id": "1a8eb4ab-44c5-4751-8bfa-900330e931a1",
      "name": "Get Voice File",
      "webhookId": "afa10f0b-de41-4cfe-8ef6-918e9f65cc00",
      "credentials": {
        "telegramApi": {
          "id": "dbqH4B8wU0fwEyd9",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "resource": "audio",
        "modelId": {
          "__rl": true,
          "value": "models/gemini-2.5-flash",
          "mode": "list",
          "cachedResultName": "models/gemini-2.5-flash"
        },
        "inputType": "binary",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "typeVersion": 1,
      "position": [
        1136,
        -1280
      ],
      "id": "48be0ebe-a53b-40d3-92a1-fd90874add9d",
      "name": "Transcribe Recording",
      "credentials": {
        "googlePalmApi": {
          "id": "CTf2VqOHGTu2mfy7",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ $json.message.photo[2].file_id }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        912,
        -1088
      ],
      "id": "d27719a6-6563-4450-bb18-aa884406b921",
      "name": "Get Photo File",
      "webhookId": "afa10f0b-de41-4cfe-8ef6-918e9f65cc00",
      "credentials": {
        "telegramApi": {
          "id": "dbqH4B8wU0fwEyd9",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "resource": "image",
        "operation": "analyze",
        "modelId": {
          "__rl": true,
          "value": "models/gemini-2.5-flash",
          "mode": "list",
          "cachedResultName": "models/gemini-2.5-flash"
        },
        "text": "=Analyze this image by identifying the **main subject**, which may be a single object or a cohesive group of related items (e.g., a meal, a collection of groceries). Your role is to act as a tool providing structured information to a manager AI agent.\n\nFocus on creating a description that will be passed to a manager AI, maintaining accuracy. Consider the user caption as context for refining your description.\n\nUser Caption: {{ $('Telegram Trigger').item.json.message.caption || 'No caption provided' }}\n\n## Three-Step Process:\n\n1.  **Identify the Main Subject:** Pinpoint the focal point of the image.\n    -   If it's one primary object, describe it.\n    -   If it's a collection of related items forming a single concept (e.g., a restaurant meal with a plate, drink, and dessert; several grocery items from a shopping trip), describe the entire group as the main subject.\n2.  **Describe the Surroundings:** Describe the background and environment where the main subject is located. This should be distinct from the items that make up a composite main subject. For example, if the subject is a meal, the surroundings are the table and restaurant, not the food itself.\n3.  **Conditional Text & Date Extraction (OCR):** Only if the main subject has a financial context (e.g., a receipt, bill, price tag, or product with a label), read all visible text. Otherwise, skip this step.\n\n## Critical Rule for Dates:\n- Extract a date only if it can be confidently identified as the **date of the purchase or transaction**.\n- Look for contextual clues like \"Date:\", \"Order Date:\", or prominent position on a receipt.\n- Ignore non-purchase dates like expiration dates or \"Valid Until\" dates.\n- If no plausible **purchase date** is found, do not output a date.\n\n## Output Format:\nYour output **MUST** be plain text and follow this structure.\nThe `Main Subject:` and `Surroundings:` lines are **mandatory**.\nInclude `Date Found:` and `Extracted Text:` **only** if text extraction is relevant.\n\n**Main Subject:** [A description of the primary object or cohesive group. Examples: \"A red electric scooter\", \"A restaurant meal consisting of a main dish, a glass of wine, and a side of fries\", \"Several grocery items including a carton of milk, a loaf of bread, and a jar of jam\"]\n\n**Surroundings:** [A description of the background and context. Examples: \"Parked on a cobblestone street next to a building\", \"Arranged on a white plate on a wooden table in a restaurant setting\", \"On a kitchen counter with a tiled backsplash\"]\n\n[If relevant:]\n**Date Found:** [YYYY--MM-DD, only if a valid purchase date is found]\n\n**Extracted Text:**\n[All relevant text found on the image]\n\n## CRITICAL: How to Handle Failures\n\n1.  **If the image is unreadable**, respond with: `Error: The image quality is too poor to analyze.`\n2.  **If the image is clear but contains no discernible main subject**, respond with: `No specific subject could be identified in this image.`\n\n## Notes:\n- Today is {{ $now }}.\n- The default currency is Euro (â‚¬).\n\nRemember: you are just a tool whose output will be passed along to a manager AI agent, and the user has a conversation with that manager. Not you.",
        "inputType": "binary",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "typeVersion": 1,
      "position": [
        1136,
        -1088
      ],
      "id": "2fbdf806-6c55-4967-bb12-d301591fdd9b",
      "name": "Analyze Image",
      "credentials": {
        "googlePalmApi": {
          "id": "CTf2VqOHGTu2mfy7",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "text": "={{ $json.output }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        5584,
        -960
      ],
      "id": "55a5f711-3f30-40b6-83d8-cfdc31c6ac34",
      "name": "Send Success Message",
      "webhookId": "b4d1bc48-042f-4441-a14d-c1ab6975cf9d",
      "credentials": {
        "telegramApi": {
          "id": "dbqH4B8wU0fwEyd9",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolCalculator",
      "typeVersion": 1,
      "position": [
        2240,
        528
      ],
      "id": "fb826b33-2b81-40e3-ad9a-10284e457ddb",
      "name": "Calculator"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Telegram Trigger').item.json.message.chat.id }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        5296,
        528
      ],
      "id": "6cf2c724-d2be-4fee-b3bc-2faab0230f28",
      "name": "Simple Memory1",
      "disabled": true
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolThink",
      "typeVersion": 1.1,
      "position": [
        5888,
        528
      ],
      "id": "ae329516-06ac-4bf7-860b-4465901d5782",
      "name": "Think1"
    },
    {
      "parameters": {
        "toolDescription": "This agent answers questions about the user's financial data. It can perform lookups, filter data, and calculate sums or averages to respond to queries like \"How much did I spend on groceries this month?",
        "text": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Prompt__User_Message_', `Isolated prompt for the agent from the manager AI agent working for the user.`, 'string') }}",
        "needsFallback": true,
        "options": {
          "systemMessage": "=You are the Data Analyst Agent, a specialized, autonomous analysis tool for the Manager Agent. You are a read-only expert at interpreting the Manager's request, fetching the necessary financial data, performing calculations, and returning a structured report. You communicate EXCLUSIVELY with the Manager Agent.\n\n## CORE DIRECTIVE: AUTONOMOUS ANALYSIS\nYou are expected to independently create and execute a data-gathering and analysis plan based on the Manager's abstract goal. You must determine the necessary tools and the sequence of calls required to fulfill the request.\n\n## CRITICAL FAILURE PROTOCOL: NO DATA, NO GUESSING\nYour primary safeguard is to **never invent data**.\n- If any data-fetching tool (e.g., `Get_Expenses`, `Get_All_Accounts`) returns an error or an empty list, you MUST try again several times.\n- If all attempts fail, you MUST immediately halt all processing.\n- You will then return a single, specific failure report to the Manager: `ANALYSIS FAILED: The data source was unavailable or returned no results for the query.`\n- **Under no circumstances** should you proceed with calculations or generate a summary based on incomplete or missing data. Fabricating information is a critical failure.\n\n## ALWAYS THINK FIRST\nYour first action for any request is **MANDATORY**: you must use the `Think` tool to create a step-by-step execution plan. Your thought process must:\n1.  **Deconstruct the Goal:** Analyze the Manager's request to understand its core objective (e.g., \"provide a general summary,\" \"find a specific transaction,\" \"search for a recurring payment\").\n2.  **Determine Response Format:** Decide whether the request requires a `High-Level Summary` (default) or a `Detailed Analysis` (if keywords like \"details\" or \"breakdown\" are present).\n3.  **Plan Tool Calls:** List the sequence of tools you will use to gather the necessary data (e.g., `Get_All_Accounts`, then `Get_Expenses` with a specific filter).\n4.  **Outline Calculations:** Specify any calculations you will perform using the `Calculator` tool after data retrieval.\n\n## STANDARD OPERATING PROCEDURES (SOPs)\n\n### SOP-1: General Financial Summary\nThis is your workflow for broad requests like \"What is the state of finances?\".\n1.  **Think:** Plan to gather all primary financial data for a summary.\n2.  **Data Collection (Parallel):**\n    -   Call `Get_All_Accounts` to find the current balance of all accounts.\n    -   Call `Get_Incomes` and `Get_Expenses` for the current month-to-date.\n    -   Call `Get_All_Categories` to retrieve budget information.\n    -   *(Adhere to the Critical Failure Protocol at each step)*\n3.  **Calculation:** Use the `Calculator` tool to sum totals, calculate net change, identify top spending categories, and compare spending to budgets.\n4.  **Structured Response:** Assemble the calculated data into the `High-Level Summary` format.\n\n### SOP-2: Specific Data Query\nThis is your workflow for specific questions like \"How much was spent on groceries in September?\".\n1.  **Think:** Plan to find a specific category and filter transactions.\n2.  **ID Acquisition:** Call `Get_All_Categories` to find the Notion Page ID for the \"Groceries\" category. *(Adhere to the Critical Failure Protocol)*\n3.  **Filtered Data Collection:** Call `Get_Expenses` using a filter for the retrieved Category ID and the specified date range. *(Adhere to the Critical Failure Protocol)*\n4.  **Calculation:** Use the `Calculator` to sum the amounts of the filtered expenses.\n5.  **Structured Response:** Return a `High-Level Summary` containing the specific answer.\n\n### SOP-3: Fact-Finding Inquiry\nThis is your workflow when the Manager asks to find data like \"Is there a recurring rent payment?\".\n1.  **Think:** Plan to search transaction history for a recurring pattern.\n2.  **Data Collection:** Call `Get_Expenses` for the last several months. *(Adhere to the Critical Failure Protocol)*\n3.  **Pattern Analysis:** Analyze results for transactions with \"rent\" in the name and consistent amounts/dates.\n4.  **Factual Report:** Respond with a simple, factual statement in the `SUMMARY_DATA` format.\n\n## TOOL RESPONSE FORMATS\n- **High-Level Summary (DEFAULT):** `ANALYSIS COMPLETE\\nSUMMARY_DATA:\\n - Total Balance: [Amount]\\n - MTD Net: [Amount] (Income: [Amount], Expenses: [Amount]) ...`\n- **Detailed Analysis (ON REQUEST ONLY):** `DETAILED ANALYSIS COMPLETE\\nTOOLS_USED:\\n - [List of tools]\\nKEY_FINDINGS:\\n ... \\nSUPPORTING_DATA:\\n ...`\n- **Failure Report:** `ANALYSIS FAILED: The data source was unavailable or returned no results for the query.`\n\n## STRICT LIMITATIONS\n- You are a read-only agent. You CANNOT create, update, or delete records.\n- You CANNOT process transfers or schedule recurring items.\n- You report only to the Manager Agent.\n\n## CONTEXTUAL INFO\n- Current date: {{ $now }}\n- Default currency: Euro (â‚¬)\n\nRemember: You are an internal analysis tool. Always start by thinking and planning. Your goal is to provide the Manager Agent with data that is structured appropriately for its needsâ€”brief by default, detailed only when requested, and never fabricated."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agentTool",
      "typeVersion": 2.2,
      "position": [
        1712,
        -640
      ],
      "id": "129565e1-3d4d-4536-bf69-200faff77c58",
      "name": "Data Analyst Agent"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Telegram Trigger').item.json.message.chat.id }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        5440,
        528
      ],
      "id": "46b62874-862e-4aef-8e8a-9fd920e0bbd5",
      "name": "Simple Memory2",
      "disabled": true
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolThink",
      "typeVersion": 1.1,
      "position": [
        5984,
        528
      ],
      "id": "44eacbf4-c614-4b69-badd-21938aa428be",
      "name": "Think2"
    },
    {
      "parameters": {
        "toolDescription": "This agent is responsible for creating transfers between accounts. It extracts all necessary information from the user's prompt (amount, sender account, receiver account, and date) and can ask for clarification if details are missing.",
        "text": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Prompt__User_Message_', `Isolated prompt for the agent from the manager AI agent working for the user.`, 'string') }}",
        "needsFallback": true,
        "options": {
          "systemMessage": "=You are the Transfer Agent, a specialized, autonomous tool for recording the movement of funds between accounts. You are an expert in validating and creating transfer records. You communicate EXCLUSIVELY with the Manager Agent.\n\n## CORE DIRECTIVE: AUTONOMOUS TRANSFER PROCESSING\nYou are expected to handle a transfer request from start to finish. Given a goal like \"The user wants to move 50 from Main to Savings,\" you must perform all necessary validation and tool calls to execute it.\n\n## CRITICAL FAILURE PROTOCOL: NO DATA, NO GUESSING\nYour primary safeguard is to **never invent data**.\n- When you call `Get_All_Accounts`, if the tool returns an error or an empty list, you MUST try again several times.\n- If all attemps fail, you MUST immediately halt all processing.\n- You will then return a single, specific failure report to the Manager: `TRANSFER FAILED: Could not retrieve the account list from the database. Unable to validate accounts.`\n- **Under no circumstances** should you proceed with the transfer if you cannot factually confirm the existence and IDs of both the sender and receiver accounts. Inventing account information is a critical failure.\n\n## ALWAYS THINK FIRST\nYour first action for any request is **MANDATORY**: you must use the `Think` tool to create a step-by-step execution plan. Your thought process must:\n1.  **Deconstruct the Goal:** Extract the key parameters from the Manager's request: `amount`, `sender_account_name`, `receiver_account_name`, `date`.\n2.  **Plan ID Acquisition:** State that your first tool call will be `Get_All_Accounts` to fetch all account data, noting the retry-and-fail protocol.\n3.  **Plan Validation Steps:** Explicitly list the validations you will perform on the data *after* a successful `Get_All_Accounts` call (e.g., \"1. Verify both sender and receiver accounts exist in the retrieved data. 2. Confirm sender ID is not the same as receiver ID. 3. Use Calculator to check if amount is positive.\").\n4.  **Final Action Plan:** State that if all validations pass, your final action will be to call the `Add_a_Transfer_entry` tool with the validated data.\n\n## STANDARD OPERATING PROCEDURE (SOP): CREATE TRANSFER\n1.  **Think:** Create the execution plan as described above.\n2.  **Account ID Acquisition:** Call the `Get_All_Accounts` tool. *(Adhere to the Critical Failure Protocol)*.\n3.  **Validation (Internal Logic):**\n    -   If `Get_All_Accounts` was successful, search its results to find the Page IDs for both the `sender_account_name` and `receiver_account_name`.\n    -   **Critical:** If either account name does not exist in the results, you must immediately halt and return a `TRANSFER FAILED` report specifying which account was not found.\n    -   Verify that the sender and receiver IDs are not the same.\n    -   Use the `Calculator` tool to ensure the `amount` is a positive number. If not, return a failure report.\n4.  **Transfer Creation:**\n    -   If all validations pass, call the `Add_a_Transfer_entry` tool.\n    -   Provide the resolved sender and receiver Page IDs, the positive amount, and the correct date.\n5.  **Structured Confirmation:** Return a `TRANSFER COMPLETE` report containing the details of the successful operation.\n\n## STRICT LIMITATIONS\n- You only create transfer records. You CANNOT create expenses/incomes, schedule recurring transfers, or analyze data.\n- You report only to the Manager Agent.\n\n## CONTEXTUAL INFO\n- Current date: {{ $now }}\n- Default currency: Euro (â‚¬)\n\nRemember: You are a transfer tool. Always start by thinking and planning. You own the entire validation and creation process for transfers. Provide a clear, structured confirmation of success or failure to the Manager Agent."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agentTool",
      "typeVersion": 2.2,
      "position": [
        2416,
        -640
      ],
      "id": "49e86fe3-34b7-4636-85e0-2b581e91e6e6",
      "name": "Transfer Agent"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Telegram Trigger').item.json.message.chat.id }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        5584,
        528
      ],
      "id": "1a1495e8-6847-48cf-9c58-68ebe941b1d0",
      "name": "Simple Memory3",
      "disabled": true
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolThink",
      "typeVersion": 1.1,
      "position": [
        6080,
        528
      ],
      "id": "975086f5-ece8-498c-b667-f584e9571c6d",
      "name": "Think3"
    },
    {
      "parameters": {
        "toolDescription": "This agent schedules recurring expenses and incomes by creating multiple future-dated entries in Notion.",
        "text": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Prompt__User_Message_', `Isolated prompt for the agent from the manager AI agent working for the user.`, 'string') }}",
        "needsFallback": true,
        "options": {
          "systemMessage": "=You are the Recurring Agent, a specialized, autonomous tool for scheduling future transactions. You are an expert in calculating date sequences and creating multiple transaction entries in batches. You communicate EXCLUSIVELY with the Manager Agent.\n\n## CORE DIRECTIVE: AUTONOMOUS SCHEDULING\nYou are expected to manage the entire recurring transaction workflow. Given a request like \"Schedule the user's â‚¬60 phone bill for the next 6 months,\" you must deconstruct the request, calculate all future dates, resolve entities, and create all required transactions in a loop.\n\n## CRITICAL FAILURE PROTOCOL: NO DATA, NO GUESSING\nYour primary safeguard is to **never invent data**.\n- When you call data-fetching tools like `Get_All_Accounts` or `Get_All_Categories`, if a tool returns an error or an empty list, you MUST try again several times.\n- If all attempts fail for any required entity, you MUST immediately halt all processing.\n- You will then return a single, specific failure report to the Manager: `RECURRING SCHEDULE FAILED: Prerequisite data (Accounts or Categories) could not be retrieved from the database.`\n- **Under no circumstances** should you proceed to the creation loop if you cannot factually confirm the existence and IDs of all required entities. Inventing IDs is a critical failure.\n\n## ALWAYS THINK FIRST\nYour first action for any request is **MANDATORY**: you must use the `Think` tool to create a step-by-step execution plan. Your thought process must:\n1.  **Deconstruct the Goal:** Analyze the Manager's request to extract all scheduling parameters (`item_name`, `amount`, `frequency`, `start_date`, `occurrences`, etc.).\n2.  **Plan Date Calculation:** State your plan to generate the full sequence of future dates based on the schedule parameters.\n3.  **Plan Entity Resolution:** Outline your plan to get the necessary Notion Page IDs *before* starting the loop (e.g., \"Call `Get_All_Accounts` and `Get_All_Categories` in parallel,\" noting the retry-and-fail protocol). Include a contingency for creating new entities only if the initial data retrieval is successful.\n4.  **Plan Execution Loop:** Describe your final plan to loop through the calculated dates and call `Add_Expense` or `Add_Income` for each one, using the pre-resolved IDs.\n\n## STANDARD OPERATING PROCEDURE (SOP): SCHEDULE RECURRING TRANSACTION\n1.  **Think & Deconstruct:** Create the execution plan as described above.\n2.  **Date Sequence Calculation:** Generate the precise list of all future dates.\n3.  **Entity Resolution (Parallel Calls):** Resolve all relational IDs before the loop. *(Adhere to the Critical Failure Protocol)*. If an entity is missing from a successful data retrieval, create it using `Create_New_Category`/`Create_New_Source`.\n4.  **Transaction Creation Loop:** For each date in the calculated sequence, call `Add_Expense` or `Add_Income`. The only parameter that changes is the date.\n5.  **Structured Confirmation:** After the loop, return a `RECURRING SCHEDULE COMPLETE` report, including the full date sequence. If any part of the process fails (including the initial data retrieval), return a `RECURRING SCHEDULE FAILED` report.\n\n## STRICT LIMITATIONS\n- You only create future-dated transactions in batches. You CANNOT create single transactions, process transfers, or perform data analysis.\n- You report only to the Manager Agent.\n\n## CONTEXTUAL INFO\n- Current date: {{ $now }}\n- Default account: Main\n- Default currency: Euro (â‚¬)\n\nRemember: You are a recurring transaction tool. Always start by thinking and planning. Your purpose is to handle the entire batch-creation process, from date calculation to the final loop, and provide a comprehensive structured report to the Manager Agent."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agentTool",
      "typeVersion": 2.2,
      "position": [
        3280,
        -640
      ],
      "id": "183b1fed-a610-4877-9e50-a63900bba96b",
      "name": "Recurring Transaction Agent"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Telegram Trigger').item.json.message.chat.id }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        5728,
        528
      ],
      "id": "7db911e1-097f-4991-afb7-192d439ddb1f",
      "name": "Simple Memory4",
      "disabled": true
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolThink",
      "typeVersion": 1.1,
      "position": [
        6176,
        528
      ],
      "id": "54eeff30-0dcf-4021-b43b-b803137c8b4e",
      "name": "Think4"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.input_text }}",
        "needsFallback": true,
        "options": {
          "systemMessage": "=Your name is Alexis. You are a helpful and conversational AI assistant. Your primary role is to chat with the user, answer their questions on any topic, and describe images they provide.\n\nIn addition to your conversational abilities, you have a specialized function as the Manager Agent, the central coordinator of a personal finance system. This role requires strict safeguards.\n\n## 1. PRIMARY DIRECTIVE: FINANCIAL TASK SAFEGUARD\nYour conversational abilities do not require special tools. However, when a user's request seems to require a financial action (recording, analyzing, transferring, or scheduling funds), you must engage a strict protocol BEFORE calling any sub-agent.\n\n1.  **Identify Intent:** First, determine if the user's request is a general conversation or if it requires you to call one of your specialized financial tools (`Data Analyst Agent`, `Ledger Agent`, `Transfer Agent`, `Recurring Agent`).\n2.  **Apply Safeguard:**\n    * For **general conversation, image descriptions, or questions not related to the user's financial data**, you should answer directly and engagingly without using any financial tools.\n    * For requests that **require a financial tool**, you MUST first verify that the specific task is listed under `System Capabilities` below.\n3.  **Act or Reject:**\n    * If the financial task is **IN-SCOPE** (listed in the capabilities), you must proceed to the `UNIVERSAL TASK PROTOCOL`.\n    * If the financial task is **OUT-OF-SCOPE** (e.g., \"sell my stock,\" \"give me investment advice,\" \"pay my credit card bill\"), you MUST NOT call any sub-agent. Instead, trigger the `Rejection Protocol`.\n\n### 1.1 System Capabilities (The ONLY allowed financial tasks)\nThis is the exhaustive list of all actions you are permitted to delegate to your sub-agents, based on their specific functions.\n\n-   **Data Analysis & Reporting (Read-Only)**\n    * **Provide a general financial summary:** This includes retrieving current balances for all accounts, summing month-to-date income and expenses, calculating the net change, and identifying top spending categories.\n    * **Compare spending against budgets:** Retrieve budget information associated with categories to check spending status.\n    * **Query specific data:** Answer focused questions like \"How much was spent on groceries in September?\" by filtering transactions by category and date range.\n    * **Search for transactions:** Look for specific transactions or analyze transaction history over several months to identify recurring patterns (e.g., \"Find my recurring rent payment\").\n    * **Provide detailed analysis:** Upon request (using words like \"details\" or \"breakdown\"), provide a more in-depth report including tools used and supporting data.\n\n-   **Managing One-Time Transactions**\n    * **Log a single transaction:** Create a new entry for a single, non-recurring expense or income.\n    * **Update a single transaction:** Modify the details of a previously logged transaction.\n\n-   **Scheduling Recurring Transactions**\n    * **Schedule future batch transactions:** Create multiple future-dated entries for a recurring expense or income based on a schedule (e.g., \"Schedule my â‚¬60 phone bill for the next 6 months\").\n\n-   **Managing Internal Fund Transfers**\n    * **Record a transfer:** Create an entry to represent the movement of a specific amount of money from a sender account to a receiver account on a given date.\n\n-   **Managing Financial Entities (Creation Only)**\n    * **Create new spending categories:** If you log or schedule an expense with a category that does not exist, the system will create it automatically.\n    * **Create new income sources:** If you log or schedule an income with a source that does not exist, the system will create it automatically.\n\n### 1.2 Rejection Protocol (For Out-of-Scope Financial Tasks)\nIf a user's request requires a financial action that is not explicitly listed above, you MUST politely reject it.\n-   **DO NOT** use the `Think` tool or any other agent for the out-of-scope task.\n-   Your response should kindly explain the limitation and clarify what you *can* do.\n-   **Example Rejection:** \"I can certainly help with logging transactions, but managing stocks is outside of my specific financial capabilities. I can record expenses and incomes, update existing transactions, and analyze your spending patterns. How can I help you with one of those tasks?\"\n\n---\n\n## 2. CORE DIRECTIVES (For In-Scope Financial Tasks)\n\n### 2.1 NEVER ASSUME, ALWAYS CLARIFY\nYou MUST NOT, under any circumstances, invent, assume, guess, or use \"typical\" values for any information that is not explicitly provided by the user or factually reported by a sub-agent. Your primary role is to identify and bridge information gaps. Any ambiguity MUST be resolved by asking the user directly. Acting on unconfirmed assumptions is a critical failure.\n\n### 2.2 SINGLE RESPONSE RULE\nCommunication with the user is handled by a final workflow node, not a tool. This means **you have only one opportunity to send a message to the user at the end of an operational cycle**. All internal work, including parallel execution waves, must be fully completed before you formulate this single, final response.\n\n---\n\n## 3. UNIVERSAL TASK PROTOCOL (For In-Scope Financial Tasks)\nFor EVERY in-scope request you receive, you MUST follow this exact four-phase process without deviation.\n\n### Phase 1: Deconstruct & Identify Gaps\nYour first internal step is always to use the `Think` tool to break down the user's request into a structured plan.\n-   **a. Acknowledge Input Source:** Note the origin of the request.\n-   **b. Identify User's Goals:** Deconstruct the message into a list of all distinct objectives.\n-   **c. Determine Required Data for Each Goal:** List the specific data fields needed for each objective.\n-   **d. Identify Information Gaps for Each Goal:** Compare provided data against required data.\n-   **e. Create a Batched Execution Plan:** This is the most critical step. You will construct a plan made of sequential \"waves\" of parallel actions to maximize agent utilization.\n\n    1.  **Task & Agent Mapping:** For each goal, identify the required sub-agent (e.g., Goal 1 -> `Ledger Agent`, Goal 2 -> `Ledger Agent`, Goal 3 -> `Data Analyst Agent`).\n    2.  **Dependency Analysis:** Identify two types of dependencies for the entire task list:\n        -   **Data Dependency:** A goal requires the output of a previous goal (e.g., \"transfer money, *then* check the new balance\").\n        -   **Agent Conflict:** Goals that require the same agent must form a sequential queue for that agent (e.g., `Ledger Agent` must process Goal 1 before Goal 2).\n    3.  **Wave Planning (Rolling Batches):** Build the plan as a sequence of waves. A wave is a set of actions that can run in parallel.\n        -   **Wave 1:** Contains the first unblocked task for each required agent.\n        -   **Wave 2:** Contains the next set of tasks from each agent's queue that were unblocked by Wave 1's completion.\n        -   Continue creating waves until all tasks are scheduled.\n    4.  **State the Plan:** Conclude your `Think` monologue with the full, multi-wave plan.\n        -   *Example Request:* \"Log my coffee (`Ledger`), log my bus ticket (`Ledger`), and check my savings balance (`Data Analyst`).\"\n        -   *Correct Plan:*\n            `Execution Plan: Batched Parallel\n             - Wave 1:\n               - Ledger Agent: Log coffee\n               - Data Analyst Agent: Check savings balance\n             - Wave 2:\n               - Ledger Agent: Log bus ticket`\n\n### Phase 2: Search for Precedent (Delegate Inquiry)\nBefore asking the user, use the `Data Analyst Agent` to find any missing information.\n\n### Phase 3: Bridge the Gaps (Engage the User)\nAdhering to the **Single Response Rule**, consolidate all questions for all tasks into one message to the user.\n\n### Phase 4: Execute with Confirmed Facts\nOnce all data is confirmed, execute your batched plan precisely.\n-   Execute the plan **wave by wave**.\n-   In each wave, delegate the planned actions to the appropriate agents **in parallel**.\n-   You **MUST** wait for all agents in the current wave to report successful completion before you begin executing the next wave.\n-   After the final wave is complete, synthesize all outcomes into a single summary.\n-   **Report Final Summary:** Adhering to the **Single Response Rule**, formulate one comprehensive message to the user.\n\n---\n\n## 4. ERROR HANDLING & CLARIFICATION\n-   **Sub-Agent Failure:** If any agent fails within a wave, you MUST halt the entire plan. Do not proceed to the next wave. Report the success of completed waves and the specific failure to the user in your final summary.\n-   **Unclear Intent:** If the user's financial request is too vague but still in scope, use your single response to explain your capabilities and ask for a specific goal.\n\n---\n\n## 5. RESPONSE & FORMATTING RULES\n-   **Be Brief & Direct:** Your responses to the user should be concise.\n-   **PLAIN TEXT ONLY:** You MUST NOT use markdown (`#`, `**`, `_`, etc.).\n-   **Summarize, Don't Detail:** Provide high-level summaries by default.\n\n## Available Tools (For Financial Tasks Only)\n-   **Think** (mandatory first step for in-scope requests)\n-   **Data Analyst Agent**\n-   **Ledger Agent**\n-   **Transfer Agent**\n-   **Recurring Agent**\n\n## CONTEXTUAL INFO\n-   **Current date:** {{ $now }}\n-   **Default account:** Main\n-   **Default currency:** Euro (â‚¬)\n\nRemember: Be a helpful, conversational AI first. When you detect a request that requires a financial action, apply your safeguards strictly. For valid requests, be an efficient orchestrator.",
          "passthroughBinaryImages": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1488,
        -864
      ],
      "id": "e4f9ace0-448d-42ae-987e-b00ad2b06e87",
      "name": "The Manager Agent",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "text": "=ERROR:\n{{ $json.output }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        5584,
        -768
      ],
      "id": "7e6f59a5-e916-4d7d-b4de-36572c5303d1",
      "name": "Send Error Message",
      "webhookId": "b4d1bc48-042f-4441-a14d-c1ab6975cf9d",
      "credentials": {
        "telegramApi": {
          "id": "dbqH4B8wU0fwEyd9",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "modelName": "=models/gemini-2.5-pro",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        1136,
        -640
      ],
      "id": "f5ec3779-d5dc-4c71-b2bc-03a3b21d0986",
      "name": "gemini-2.5-pro",
      "credentials": {
        "googlePalmApi": {
          "id": "CTf2VqOHGTu2mfy7",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "model": "=x-ai/grok-4-fast:free",
        "options": {
          "maxRetries": 10
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        1008,
        -640
      ],
      "id": "835c3e97-4ac3-4df2-8735-a65877a5d953",
      "name": "grok-4-fast",
      "credentials": {
        "openRouterApi": {
          "id": "ZKTJgDKo5oXOolBu",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Telegram Trigger').item.json.message.chat.id }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        1264,
        -640
      ],
      "id": "346891b6-922b-4e2c-a20f-9daadfa877d1",
      "name": "Simple Memory",
      "disabled": true
    },
    {
      "parameters": {
        "modelName": "=models/gemini-2.5-pro",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        1568,
        528
      ],
      "id": "36a62c3b-b677-40a7-b7d4-1b98d99e9535",
      "name": "gemini-2.5-pro1",
      "credentials": {
        "googlePalmApi": {
          "id": "CTf2VqOHGTu2mfy7",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "model": "=x-ai/grok-4-fast:free",
        "options": {
          "maxRetries": 10
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        1040,
        528
      ],
      "id": "aee79f4e-907d-4f7c-aba7-5a0aa3b335c7",
      "name": "grok-4-fast1",
      "credentials": {
        "openRouterApi": {
          "id": "ZKTJgDKo5oXOolBu",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolThink",
      "typeVersion": 1.1,
      "position": [
        1392,
        -640
      ],
      "id": "bb017b6a-a304-4a58-8e64-3639e7a28b29",
      "name": "Think"
    },
    {
      "parameters": {
        "resource": "databasePage",
        "databaseId": {
          "__rl": true,
          "value": "21a4bf6b-83b3-81e5-b366-ebd4a5b6b682",
          "mode": "list",
          "cachedResultName": "Expenses",
          "cachedResultUrl": "https://www.notion.so/21a4bf6b83b381e5b366ebd4a5b6b682"
        },
        "title": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Title', ``, 'string') }}",
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "=Amount|number",
              "numberValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues0_Number', ``, 'number') }}"
            },
            {
              "key": "Category|relation",
              "relationValue": [
                "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues1_relationValue0_Relation_IDs', `Must never be empty. Use the \"Other\" Category ID (string) if no category is specified in the request`, 'string') }}"
              ]
            },
            {
              "key": "Date|date",
              "includeTime": false,
              "date": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues2_Date', ``, 'string') }}",
              "timezone": "Europe/Brussels"
            },
            {
              "key": "=Type|select",
              "selectValue": "={{ $fromAI('propertyValues3_Select', 'Can be Single for single transaction, Every 3 Months or Every 1 Month, for recurring transactions. If another recurring type is requested output that it is not in your abilities', 'string', 'Single') }}"
            },
            {
              "key": "=Accounts|relation",
              "relationValue": [
                "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues4_relationValue0_Relation_IDs', `Must never be empty. Use the Main account ID (string) if no account is specified in the request`, 'string') }}"
              ]
            },
            {
              "key": "=Analytics|status",
              "statusValue": "={{ $fromAI('propertyValues5_Select', 'Can be Include In Analytics or Exclude From Analytics', 'string', 'Include In Analytics') }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notionTool",
      "typeVersion": 2.2,
      "position": [
        3312,
        528
      ],
      "id": "a48da925-2b3b-4b2b-89fd-09411c6b8ceb",
      "name": "Add Expense",
      "credentials": {
        "notionApi": {
          "id": "xhPFZolX6B78T2VZ",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "databaseId": {
          "__rl": true,
          "value": "21a4bf6b-83b3-8121-ab92-f1814a4e6e69",
          "mode": "list",
          "cachedResultName": "Incomes",
          "cachedResultUrl": "https://www.notion.so/21a4bf6b83b38121ab92f1814a4e6e69"
        },
        "title": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Title', ``, 'string') }}",
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "Amount|number",
              "numberValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues0_Number', ``, 'number') }}"
            },
            {
              "key": "Date|date",
              "includeTime": false,
              "date": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues1_Date', ``, 'string') }}",
              "timezone": "Europe/Brussels"
            },
            {
              "key": "Source|relation",
              "relationValue": [
                "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues2_relationValue0_Relation_IDs', `Must never be empty. Use the \"Other\" source ID if no source is specified in the request`, 'string') }}"
              ]
            },
            {
              "key": "Accounts|relation",
              "relationValue": [
                "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues3_relationValue0_Relation_IDs', `Must never be empty. Use the Main account ID if no account is specified in the request`, 'string') }}"
              ]
            },
            {
              "key": "Analytics|status",
              "statusValue": "={{ $fromAI('propertyValues4_Select', 'Can be Include In Analytics or Exclude From Analytics', 'string', 'Include In Analytics') }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notionTool",
      "typeVersion": 2.2,
      "position": [
        3456,
        528
      ],
      "id": "b20311cc-28f8-4216-9ec7-a69c0ea89db8",
      "name": "Add Income",
      "credentials": {
        "notionApi": {
          "id": "xhPFZolX6B78T2VZ",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "21a4bf6b-83b3-80d4-a7b3-f51fe09d2f65",
          "mode": "list",
          "cachedResultName": "Accounts",
          "cachedResultUrl": "https://www.notion.so/21a4bf6b83b380d4a7b3f51fe09d2f65"
        },
        "returnAll": true,
        "options": {}
      },
      "type": "n8n-nodes-base.notionTool",
      "typeVersion": 2.2,
      "position": [
        2352,
        528
      ],
      "id": "0f7d129d-aebf-4ba1-8422-c60407d0139c",
      "name": "Get All Accounts",
      "credentials": {
        "notionApi": {
          "id": "xhPFZolX6B78T2VZ",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "21a4bf6b-83b3-8104-ab15-dab184680139",
          "mode": "list",
          "cachedResultName": "Sources",
          "cachedResultUrl": "https://www.notion.so/21a4bf6b83b38104ab15dab184680139"
        },
        "returnAll": true,
        "options": {}
      },
      "type": "n8n-nodes-base.notionTool",
      "typeVersion": 2.2,
      "position": [
        2640,
        528
      ],
      "id": "ad623057-3b33-4475-8fd3-71e514841fbd",
      "name": "Get All Sources",
      "credentials": {
        "notionApi": {
          "id": "xhPFZolX6B78T2VZ",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "21a4bf6b-83b3-81ef-9ebd-e00bdedc4cb6",
          "mode": "list",
          "cachedResultName": "Budgets",
          "cachedResultUrl": "https://www.notion.so/21a4bf6b83b381ef9ebde00bdedc4cb6"
        },
        "returnAll": true,
        "options": {}
      },
      "type": "n8n-nodes-base.notionTool",
      "typeVersion": 2.2,
      "position": [
        2496,
        528
      ],
      "id": "04e9875b-1438-4fc6-a5cf-69732cab2fce",
      "name": "Get All Categories",
      "credentials": {
        "notionApi": {
          "id": "xhPFZolX6B78T2VZ",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Use this tool to update budget pages properties.",
        "resource": "databasePage",
        "operation": "update",
        "pageId": {
          "__rl": true,
          "mode": "id",
          "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Database_Page', ``, 'string') }}",
          "__regex": "^([0-9a-f]{8}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{12})"
        },
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "=Name|title",
              "title": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues0_Title', `Name of the category. Keep it to previous value if no specific request regarding its value has been provided (string).`, 'string') }}"
            },
            {
              "key": "=This Month Budget|number",
              "numberValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues1_Number', `Must never be empty unless specifically requested by the user. Keep it to previous value if no specific request regarding its value has been provided (number).`, 'number') }}"
            },
            {
              "key": "=Accounts|relation",
              "relationValue": [
                "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues2_relationValue0_Relation_IDs', `Must never be empty. The default account is the Main account. This represents the account ID (string)`, 'string') }}"
              ]
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notionTool",
      "typeVersion": 2.2,
      "position": [
        4896,
        528
      ],
      "id": "989ee3eb-166d-4496-8ebc-14436b49632e",
      "name": "Update Category",
      "credentials": {
        "notionApi": {
          "id": "xhPFZolX6B78T2VZ",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "21a4bf6b-83b3-81e5-b366-ebd4a5b6b682",
          "mode": "list",
          "cachedResultName": "Expenses",
          "cachedResultUrl": "https://www.notion.so/21a4bf6b83b381e5b366ebd4a5b6b682"
        },
        "returnAll": true,
        "filterType": "manual",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "key": "Date|date",
              "condition": "=on_or_after",
              "date": "={{ $fromAI('conditions0_Date', `The start date for the filter. For a range, this is the first day. For a single-day query (e.g., 'today', or a specific day), this MUST be the day before the requested date. If the request is about the future with no specific end, this should be the current date.`, 'string') }}"
            },
            {
              "key": "Date|date",
              "condition": "on_or_before",
              "date": "={{ $fromAI('conditions1_Date', `The end date for the filter (YYYY-MM-DD). For a range, this is the last day. For a single-day query (e.g., 'today', or a specfic day), this MUST be the day after the requested date. IMPORTANT: If the request is about the future with no specific end, set this date to at least two months in the future from the current date.`, 'string') }}"
            }
          ]
        },
        "options": {
          "sort": {
            "sortValue": [
              {
                "key": "Date|date",
                "direction": "descending"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.notionTool",
      "typeVersion": 2.2,
      "position": [
        2928,
        528
      ],
      "id": "cc7aa85f-c0b3-4e3f-ac25-9727734b3e0c",
      "name": "Get Expenses",
      "credentials": {
        "notionApi": {
          "id": "xhPFZolX6B78T2VZ",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "21a4bf6b-83b3-8121-ab92-f1814a4e6e69",
          "mode": "list",
          "cachedResultName": "Incomes",
          "cachedResultUrl": "https://www.notion.so/21a4bf6b83b38121ab92f1814a4e6e69"
        },
        "returnAll": true,
        "filterType": "manual",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "key": "Date|date",
              "condition": "on_or_after",
              "date": "={{ $fromAI('conditions0_Date', `The start date for the filter. For a range, this is the first day. For a single-day query (e.g., 'today', or a specific day), this MUST be the day before the requested date. If the request is about the future with no specific end, this should be the current date.`, 'string') }}"
            },
            {
              "key": "Date|date",
              "condition": "on_or_before",
              "date": "={{ $fromAI('conditions1_Date', `The end date for the filter (YYYY-MM-DD). For a range, this is the last day. For a single-day query (e.g., 'today', or a specfic day), this MUST be the day after the requested date. IMPORTANT: If the request is about the future with no specific end, set this date to at least two months in the future from the current date.`, 'string') }}"
            }
          ]
        },
        "options": {
          "sort": {
            "sortValue": [
              {
                "key": "Date|date",
                "direction": "descending"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.notionTool",
      "typeVersion": 2.2,
      "position": [
        3072,
        528
      ],
      "id": "a09071e0-68ff-420b-8464-ccd96087f03e",
      "name": "Get Incomes",
      "credentials": {
        "notionApi": {
          "id": "xhPFZolX6B78T2VZ",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "update",
        "pageId": {
          "__rl": true,
          "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Database_Page', ``, 'string') }}",
          "mode": "id"
        },
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "=Accounts|relation",
              "relationValue": [
                "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues0_relationValue0_Relation_IDs', `Must never be empty. The default account is the Main account. This represents the account ID (string)`, 'string') }}"
              ]
            },
            {
              "key": "=Amount|number",
              "numberValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues1_Number', ``, 'number') }}"
            },
            {
              "key": "=Category|relation",
              "relationValue": [
                "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues2_relationValue0_Relation_IDs', `Must never be empty. Previous Category ID found in memory (string)`, 'string') }}"
              ]
            },
            {
              "key": "=Date|date",
              "includeTime": false,
              "date": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues3_Date', ``, 'string') }}",
              "timezone": "=default"
            },
            {
              "key": "=Type|select",
              "selectValue": "={{ $fromAI('propertyValues4_Select', 'Can be Single for single transaction, Every 3 Months or Every 1 Month, for recurring transactions. If another recurring type is requested output that it is not in your abilities', 'string', 'Single') }}"
            },
            {
              "key": "=Analytics|status",
              "statusValue": "={{ $fromAI('propertyValues5_Select', 'Must not be empty. Can be Include In Analytics or Exclude From Analytics', 'string', 'Include In Analytics') }}"
            },
            {
              "key": "=Name|title",
              "title": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues6_Title', `Name of the entry. Keep it to previous value if no specific request regarding its value has been provided (string).`, 'string') }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notionTool",
      "typeVersion": 2.2,
      "position": [
        4320,
        528
      ],
      "id": "70a508e7-1fc2-45b8-970d-4f8198c8f96e",
      "name": "Update Expense",
      "credentials": {
        "notionApi": {
          "id": "xhPFZolX6B78T2VZ",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "update",
        "pageId": {
          "__rl": true,
          "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Database_Page', ``, 'string') }}",
          "mode": "id"
        },
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "=Accounts|relation",
              "relationValue": [
                "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues0_relationValue0_Relation_IDs', `Must never be empty. The default account is the Main account. This represents the account ID (string).`, 'string') }}"
              ]
            },
            {
              "key": "=Amount|number",
              "numberValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues1_Number', ``, 'number') }}"
            },
            {
              "key": "=Date|date",
              "includeTime": false,
              "date": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues2_Date', ``, 'string') }}",
              "timezone": "=default"
            },
            {
              "key": "=Name|title",
              "title": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues3_Title', `Name of the entry. Keep it to previous value if no specific request regarding its value has been provided (string).`, 'string') }}"
            },
            {
              "key": "=Source|relation",
              "relationValue": [
                "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues4_relationValue0_Relation_IDs', `Must never be empty. Previous Source ID found in memory (string)`, 'string') }}"
              ]
            },
            {
              "key": "=Analytics|status",
              "statusValue": "={{ $fromAI('propertyValues5_Select', 'Must not be empty. Can be Include In Analytics or Exclude From Analytics', 'string', 'Include In Analytics') }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notionTool",
      "typeVersion": 2.2,
      "position": [
        4464,
        528
      ],
      "id": "5d82e0bb-e417-49df-bd44-f323725af804",
      "name": "Update Income",
      "credentials": {
        "notionApi": {
          "id": "xhPFZolX6B78T2VZ",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "21b4bf6b-83b3-80b8-a632-c7e3904c655c",
          "mode": "list",
          "cachedResultName": "Transfers",
          "cachedResultUrl": "https://www.notion.so/21b4bf6b83b380b8a632c7e3904c655c"
        },
        "returnAll": true,
        "options": {}
      },
      "type": "n8n-nodes-base.notionTool",
      "typeVersion": 2.2,
      "position": [
        2784,
        528
      ],
      "id": "96ef6419-3b5e-4c6d-b003-f3a4bbb15cd1",
      "name": "Get All Transfers",
      "credentials": {
        "notionApi": {
          "id": "xhPFZolX6B78T2VZ",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "update",
        "pageId": {
          "__rl": true,
          "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Database_Page', ``, 'string') }}",
          "mode": "id"
        },
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "=Sender|relation",
              "relationValue": [
                "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues0_relationValue0_Relation_IDs', `Must never be empty. This represents the account ID (string)`, 'string') }}"
              ]
            },
            {
              "key": "=Amount To Transfer|number",
              "numberValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues1_Number', ``, 'number') }}"
            },
            {
              "key": "=Transfer Date|date",
              "includeTime": false,
              "date": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues3_Date', ``, 'string') }}",
              "timezone": "=default"
            },
            {
              "key": "=Name|title",
              "title": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues6_Title', `Name of the entry. Keep it to previous value if no specific request regarding its value has been provided (string).`, 'string') }}"
            },
            {
              "key": "=Receiver|relation",
              "relationValue": [
                "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues4_relationValue0_Relation_IDs', `Must never be empty. This represents the account ID (string)`, 'string') }}"
              ]
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notionTool",
      "typeVersion": 2.2,
      "position": [
        4608,
        528
      ],
      "id": "e14faf85-0242-482a-89d2-110426758899",
      "name": "Update Transfer",
      "credentials": {
        "notionApi": {
          "id": "xhPFZolX6B78T2VZ",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d2c77348-8471-4d09-be0b-54cd378c7853",
              "name": "input_text",
              "value": "={{ $json.message.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1296,
        -864
      ],
      "id": "2178f713-7896-43b1-a133-5066dd1bf3ef",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "34129220-59a1-4288-b732-c6887a944b31",
              "name": "input_text",
              "value": "=Extracted from audio:\n{{ $json.content.parts[0].text }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "include": "selected",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1296,
        -1280
      ],
      "id": "037c2fb2-f96b-4e53-a710-e68eb1e836d8",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "34129220-59a1-4288-b732-c6887a944b31",
              "name": "input_text",
              "value": "=Extracted from image:\n{{ $json.content.parts[0].text }}\n\nCAPTION ADDED BY THE USER: {{ $('Telegram Trigger').item.json.message.caption || 'No caption provided' }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1296,
        -1088
      ],
      "id": "c7a77cae-2948-46bc-8c47-863ff892e655",
      "name": "Edit Fields2"
    },
    {
      "parameters": {
        "resource": "databasePage",
        "databaseId": {
          "__rl": true,
          "value": "21a4bf6b-83b3-81ef-9ebd-e00bdedc4cb6",
          "mode": "list",
          "cachedResultName": "Budgets",
          "cachedResultUrl": "https://www.notion.so/21a4bf6b83b381ef9ebde00bdedc4cb6"
        },
        "title": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Title', `Name of the budget category.`, 'string') }}",
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "=Accounts|relation",
              "relationValue": [
                "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues0_relationValue0_Relation_IDs', `Must never be empty. The default account is the Main account. This represents the account ID (string).`, 'string') }}"
              ]
            },
            {
              "key": "=This Month Budget|number",
              "numberValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues1_Number', `Budget value of the current month. put the value to cover expenses. if no value, leave it empty.`, 'number') }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notionTool",
      "typeVersion": 2.2,
      "position": [
        3920,
        528
      ],
      "id": "c3aba009-657c-4bdf-8c21-e82867357e6c",
      "name": "Create New Category",
      "credentials": {
        "notionApi": {
          "id": "xhPFZolX6B78T2VZ",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "databaseId": {
          "__rl": true,
          "value": "21a4bf6b-83b3-8104-ab15-dab184680139",
          "mode": "list",
          "cachedResultName": "Sources",
          "cachedResultUrl": "https://www.notion.so/21a4bf6b83b38104ab15dab184680139"
        },
        "title": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Title', `Name of the source.`, 'string') }}",
        "options": {}
      },
      "type": "n8n-nodes-base.notionTool",
      "typeVersion": 2.2,
      "position": [
        4064,
        528
      ],
      "id": "73ae4864-3dc0-4cb3-9a42-8741da1f0ff3",
      "name": "Create New Source",
      "credentials": {
        "notionApi": {
          "id": "xhPFZolX6B78T2VZ",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Use this tool to update source pages properties.",
        "resource": "databasePage",
        "operation": "update",
        "pageId": {
          "__rl": true,
          "mode": "id",
          "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Database_Page', ``, 'string') }}",
          "__regex": "^([0-9a-f]{8}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{12})"
        },
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "=Name|title",
              "title": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues0_Title', `Name of the source. Keep it to previous value if no specific request regarding its value has been provided (string).`, 'string') }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notionTool",
      "typeVersion": 2.2,
      "position": [
        5040,
        528
      ],
      "id": "a615bb75-216e-4600-938a-7918e31fe24b",
      "name": "Update Source",
      "credentials": {
        "notionApi": {
          "id": "xhPFZolX6B78T2VZ",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "This agent is responsible for creating and updating database items. It extracts all necessary information from the user's prompt and can ask for clarification if details are missing.",
        "text": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Prompt__User_Message_', `Isolated prompt for the agent from the manager AI agent working for the user.`, 'string') }}",
        "needsFallback": true,
        "options": {
          "systemMessage": "=You are the Ledger Agent, a specialized, autonomous transaction management tool for the Manager Agent. You are an expert in the process of creating and updating single transactions and their related entities (categories, sources, accounts). You communicate EXCLUSIVELY with the Manager Agent.\n\n## CORE DIRECTIVE: AUTONOMOUS TRANSACTION PROCESSING\nYou are expected to independently manage the entire lifecycle of a transaction request. Given a simple instruction like \"The user bought a coffee for 3.50,\" you must execute the full sequence of fetching, validating, potentially creating entities, and logging the final transaction.\n\n## CRITICAL FAILURE PROTOCOL: NO DATA, NO GUESSING\nYour primary safeguard is to **never invent data**.\n- When you call data-fetching tools like `Get_All_Accounts`, `Get_All_Categories`, or `Get_All_Sources`, if a tool returns an error or an empty list, you MUST try again several times.\n- If all attempts fail for any required entity list, you MUST immediately halt all processing.\n- You will then return a single, specific failure report to the Manager: `OPERATION FAILED: Could not retrieve necessary entity lists (e.g., Accounts, Categories) from the database.`\n- **Under no circumstances** should you proceed to log the transaction if you cannot factually resolve the required IDs. Inventing IDs is a critical failure.\n\n## ALWAYS THINK FIRST\nYour first action for any request is **MANDATORY**: you must use the `Think` tool to create a step-by-step execution plan. Your thought process must:\n1.  **Deconstruct the Goal:** Analyze the Manager's request to extract all provided data points (`item_name`, `amount`, `date`, `account_name`, `category_name`, etc.).\n2.  **Plan Entity Resolution:** Outline your plan to get the necessary Notion Page IDs. This usually involves parallel calls to `Get_All_Accounts` and `Get_All_Categories`/`Get_All_Sources`, noting the retry-and-fail protocol.\n3.  **Create Contingency Plan:** State your logic for handling entities that don't exist *after* a successful data retrieval (e.g., \"If the category 'Electronics' is not found in the retrieved list, I will call the `Create_New_Category` tool.\").\n4.  **Final Action Plan:** List the final tool call (`Add_Expense` or `Update_Income`) that will complete the task, mentioning that you will use the IDs resolved in the previous steps.\n\n## STANDARD OPERATING PROCEDURE (SOP): LOG TRANSACTION\n1.  **Think:** Create the execution plan as described above.\n2.  **Entity Resolution (Parallel Calls):** Call `Get_All_Accounts` and `Get_All_Categories`/`Get_All_Sources` to find the required Notion Page IDs. *(Adhere to the Critical Failure Protocol)*.\n3.  **Entity Handling (Internal Logic):**\n    -   If a data retrieval call was successful, check for an exact or close match for an entity.\n    -   If no relevant entity exists in the retrieved data, call `Create_New_Category` or `Create_New_Source` to create it and use the new ID.\n4.  **Transaction Creation/Update:** Use the `Calculator` to ensure the amount is correct (negative for expenses, positive for incomes), then call the appropriate tool (`Add_Expense`, `Add_Income`, etc.) with the resolved IDs.\n5.  **Structured Confirmation:** Assemble a report using the `OPERATION COMPLETE` format, explicitly noting any new entities created. If the process fails, use the specified failure report format.\n\n## STRICT LIMITATIONS\n- You only handle single, non-recurring transactions. You CANNOT process transfers, schedule recurring transactions, or perform data analysis.\n- You report only to the Manager Agent.\n\n## CONTEXTUAL INFO\n- Current date: {{ $now }}\n- Default account: Main\n- Default currency: Euro (â‚¬)\n\nRemember: You are a transaction tool. Always start by thinking and planning. Your job is to own the entire process of logging a single entry, from resolving IDs to creating the final record, and then provide a structured confirmation to the Manager Agent."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agentTool",
      "typeVersion": 2.2,
      "position": [
        4528,
        -640
      ],
      "id": "00023a83-d7e1-4e1c-99cd-49164f060df0",
      "name": "Ledger Agent"
    },
    {
      "parameters": {
        "resource": "databasePage",
        "databaseId": {
          "__rl": true,
          "value": "21a4bf6b-83b3-80d4-a7b3-f51fe09d2f65",
          "mode": "list",
          "cachedResultName": "Accounts",
          "cachedResultUrl": "https://www.notion.so/21a4bf6b83b380d4a7b3f51fe09d2f65"
        },
        "title": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Title', `Name of the account`, 'string') }}",
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "Account Type|select",
              "selectValue": "={{ $fromAI('propertyValues0_Select', 'Can be Current Account or Saving Account depending of the purpose of the request', 'string', 'Current Account') }}"
            },
            {
              "key": "Balance init|number",
              "numberValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues1_Number', `Upon new creation, must always be 0`, 'number') }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notionTool",
      "typeVersion": 2.2,
      "position": [
        3776,
        528
      ],
      "id": "622b1299-cffc-4c78-92b3-ce22dae198ca",
      "name": "Create New Account",
      "credentials": {
        "notionApi": {
          "id": "xhPFZolX6B78T2VZ",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "update",
        "pageId": {
          "__rl": true,
          "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Database_Page', ``, 'string') }}",
          "mode": "id"
        },
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "=Name|title",
              "title": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues0_Title', `Name of the account. Keep it to previous value if no specific request regarding its value has been provided (string).`, 'string') }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notionTool",
      "typeVersion": 2.2,
      "position": [
        4752,
        528
      ],
      "id": "0753c137-4757-450c-ac22-f4ca5c2ad8a0",
      "name": "Update Account",
      "credentials": {
        "notionApi": {
          "id": "xhPFZolX6B78T2VZ",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "databaseId": {
          "__rl": true,
          "value": "21b4bf6b83b380b8a632c7e3904c655c",
          "mode": "list",
          "cachedResultName": "Transfers"
        },
        "title": "={{ `New Transfer - ${$now.toFormat('yyyy-MM-dd HH:mm')}` }}",
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "Amount To Transfer|number",
              "numberValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('amount', ``, 'number') }}"
            },
            {
              "key": "Sender|relation",
              "relationValue": [
                "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues1_relationValue0_Relation_IDs', `Notion Page ID (string) for the sender account.`, 'string') }}"
              ]
            },
            {
              "key": "Receiver|relation",
              "relationValue": [
                "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues2_relationValue0_Relation_IDs', `Notion Page ID (string) for the receiver account.`, 'string') }}"
              ]
            },
            {
              "key": "Transfer Date|date",
              "date": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues3_Date', `Date and time of the transfer. The default date and time is the current one (now), if none is provided. For this property field, You MUST provide the time too, not only the date.`, 'string') }}",
              "timezone": "Europe/Brussels"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notionTool",
      "typeVersion": 2.2,
      "position": [
        3600,
        528
      ],
      "id": "b6d9b17f-9187-434b-a796-34ce9d78b03a",
      "name": "Add a Transfer entry",
      "credentials": {
        "notionApi": {
          "id": "xhPFZolX6B78T2VZ",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "modelName": "=models/gemini-2.5-pro",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        1712,
        528
      ],
      "id": "7d5b4ea5-aee2-4517-8c2d-6d31a601b3f7",
      "name": "gemini-2.5-pro2",
      "credentials": {
        "googlePalmApi": {
          "id": "CTf2VqOHGTu2mfy7",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "model": "=x-ai/grok-4-fast:free",
        "options": {
          "maxRetries": 10
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        1168,
        528
      ],
      "id": "e8df26cd-9d6b-414f-bd7e-513dcb9e25d6",
      "name": "grok-4-fast2",
      "credentials": {
        "openRouterApi": {
          "id": "ZKTJgDKo5oXOolBu",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "modelName": "=models/gemini-2.5-pro",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        1856,
        528
      ],
      "id": "704307fe-a2fb-4a83-9623-dbb4e38b9bce",
      "name": "gemini-2.5-pro3",
      "credentials": {
        "googlePalmApi": {
          "id": "CTf2VqOHGTu2mfy7",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "model": "=x-ai/grok-4-fast:free",
        "options": {
          "maxRetries": 10
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        1296,
        528
      ],
      "id": "20024248-fbe4-4a18-a2cf-07f0ce9a9854",
      "name": "grok-4-fast3",
      "credentials": {
        "openRouterApi": {
          "id": "ZKTJgDKo5oXOolBu",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "modelName": "=models/gemini-2.5-pro",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        2000,
        528
      ],
      "id": "6743811d-0318-4107-804e-5ed9ca5c9605",
      "name": "gemini-2.5-pro4",
      "credentials": {
        "googlePalmApi": {
          "id": "CTf2VqOHGTu2mfy7",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "model": "=x-ai/grok-4-fast:free",
        "options": {
          "maxRetries": 10
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        1424,
        528
      ],
      "id": "43c9530b-11bb-49ab-981e-d8b078ff2a03",
      "name": "grok-4-fast4",
      "credentials": {
        "openRouterApi": {
          "id": "ZKTJgDKo5oXOolBu",
          "name": "OpenRouter account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Switch Input Type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch Input Type": {
      "main": [
        [
          {
            "node": "Get Voice File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Photo File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Voice File": {
      "main": [
        [
          {
            "node": "Transcribe Recording",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transcribe Recording": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Photo File": {
      "main": [
        [
          {
            "node": "Analyze Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze Image": {
      "main": [
        [
          {
            "node": "Edit Fields2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calculator": {
      "ai_tool": [
        [
          {
            "node": "Ledger Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Data Analyst Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Transfer Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Recurring Transaction Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory1": {
      "ai_memory": [
        [
          {
            "node": "Ledger Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Think1": {
      "ai_tool": [
        [
          {
            "node": "Ledger Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory2": {
      "ai_memory": [
        [
          {
            "node": "Data Analyst Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Think2": {
      "ai_tool": [
        [
          {
            "node": "Data Analyst Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Data Analyst Agent": {
      "ai_tool": [
        [
          {
            "node": "The Manager Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory3": {
      "ai_memory": [
        [
          {
            "node": "Transfer Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Think3": {
      "ai_tool": [
        [
          {
            "node": "Transfer Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Transfer Agent": {
      "ai_tool": [
        [
          {
            "node": "The Manager Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory4": {
      "ai_memory": [
        [
          {
            "node": "Recurring Transaction Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Think4": {
      "ai_tool": [
        [
          {
            "node": "Recurring Transaction Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Recurring Transaction Agent": {
      "ai_tool": [
        [
          {
            "node": "The Manager Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "The Manager Agent": {
      "main": [
        [
          {
            "node": "Send Success Message",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send Error Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "grok-4-fast": {
      "ai_languageModel": [
        [
          {
            "node": "The Manager Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "gemini-2.5-pro": {
      "ai_languageModel": [
        [
          {
            "node": "The Manager Agent",
            "type": "ai_languageModel",
            "index": 1
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "The Manager Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "grok-4-fast1": {
      "ai_languageModel": [
        [
          {
            "node": "Data Analyst Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "gemini-2.5-pro1": {
      "ai_languageModel": [
        [
          {
            "node": "Data Analyst Agent",
            "type": "ai_languageModel",
            "index": 1
          }
        ]
      ]
    },
    "Think": {
      "ai_tool": [
        [
          {
            "node": "The Manager Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Add Expense": {
      "ai_tool": [
        [
          {
            "node": "Ledger Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Recurring Transaction Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Add Income": {
      "ai_tool": [
        [
          {
            "node": "Ledger Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Recurring Transaction Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Update Category": {
      "ai_tool": [
        [
          {
            "node": "Ledger Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get All Accounts": {
      "ai_tool": [
        [
          {
            "node": "Ledger Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Transfer Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Recurring Transaction Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Data Analyst Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get All Sources": {
      "ai_tool": [
        [
          {
            "node": "Ledger Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Data Analyst Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Recurring Transaction Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get All Categories": {
      "ai_tool": [
        [
          {
            "node": "Ledger Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Data Analyst Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Recurring Transaction Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Expenses": {
      "ai_tool": [
        [
          {
            "node": "Ledger Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Data Analyst Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Recurring Transaction Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Incomes": {
      "ai_tool": [
        [
          {
            "node": "Ledger Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Data Analyst Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Recurring Transaction Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Update Expense": {
      "ai_tool": [
        [
          {
            "node": "Ledger Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Recurring Transaction Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Update Income": {
      "ai_tool": [
        [
          {
            "node": "Ledger Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Recurring Transaction Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get All Transfers": {
      "ai_tool": [
        [
          {
            "node": "Transfer Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Update Transfer": {
      "ai_tool": [
        [
          {
            "node": "Transfer Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "The Manager Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields2": {
      "main": [
        [
          {
            "node": "The Manager Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "The Manager Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create New Category": {
      "ai_tool": [
        [
          {
            "node": "Ledger Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Create New Source": {
      "ai_tool": [
        [
          {
            "node": "Ledger Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Update Source": {
      "ai_tool": [
        [
          {
            "node": "Ledger Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Ledger Agent": {
      "ai_tool": [
        [
          {
            "node": "The Manager Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Create New Account": {
      "ai_tool": [
        [
          {
            "node": "Ledger Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Update Account": {
      "ai_tool": [
        [
          {
            "node": "Ledger Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Add a Transfer entry": {
      "ai_tool": [
        [
          {
            "node": "Transfer Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "grok-4-fast2": {
      "ai_languageModel": [
        [
          {
            "node": "Transfer Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "gemini-2.5-pro2": {
      "ai_languageModel": [
        [
          {
            "node": "Transfer Agent",
            "type": "ai_languageModel",
            "index": 1
          }
        ]
      ]
    },
    "grok-4-fast3": {
      "ai_languageModel": [
        [
          {
            "node": "Recurring Transaction Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "gemini-2.5-pro3": {
      "ai_languageModel": [
        [
          {
            "node": "Recurring Transaction Agent",
            "type": "ai_languageModel",
            "index": 1
          }
        ]
      ]
    },
    "grok-4-fast4": {
      "ai_languageModel": [
        [
          {
            "node": "Ledger Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "gemini-2.5-pro4": {
      "ai_languageModel": [
        [
          {
            "node": "Ledger Agent",
            "type": "ai_languageModel",
            "index": 1
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1",
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "BdPZPAcsRgUSMBIk",
    "timeSavedPerExecution": 0
  },
  "versionId": "f1b72a21-68cc-49e9-af89-3359f85de683",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "f6b23180a40ad9c1f19233919060eb2036225d0ebab77c0e6d7346fdfd5470bc"
  },
  "id": "LpQjYsjwwZ104lBc",
  "tags": []
}