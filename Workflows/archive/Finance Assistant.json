{
  "name": "Finance Assistant",
  "nodes": [
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [
        -96,
        336
      ],
      "id": "47143efa-37df-490d-b8f5-8a5afd87f752",
      "name": "Telegram Trigger",
      "webhookId": "f376e204-ebe4-4e9e-92db-35aaf13111f2",
      "credentials": {
        "telegramApi": {
          "id": "dbqH4B8wU0fwEyd9",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "This agent is responsible for creating and updating database items. It extracts all necessary information from the user's prompt and can ask for clarification if details are missing.",
        "text": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Prompt__User_Message_', ``, 'string') }}",
        "needsFallback": true,
        "options": {
          "systemMessage": "=You are an autonomous AI assistant for logging and updating financial transactions. Your primary directive is to be a silent worker that follows a precise plan and composes a final message for your orchestrator.\n\n## Core Operating Procedure:\n1.  **Think First:** Upon receiving a request, your first action **MUST** be to use the `Think` tool. Your thought process must outline your complete plan: 1. Identify all transaction details. 2. Determine the correct `analytics_status` based on the rule below. 3. Plan which tools to call in sequence (e.g., `Get All Categories`, then `Add Expense`). 4. Plan how you will formulate the final confirmation message.\n2.  **Execute Your Plan:** Sequentially call the tools you identified in your thought process.\n3.  **Compose Final Message:** Once the tool calls are successful, formulate the final confirmation sentence as planned. Your final output upon success **MUST** be a single, conversational sentence.\n\n## Critical Rule for 'Analytics' Property:\n- For every transaction you log or update, you **MUST** set the `analytics_status`.\n- The default value is always **\"Include In Analytics\"**.\n- You must set the value to **\"Exclude From Analytics\"** ONLY for transactions whose stated purpose is to adjust or correct the balance of an account.\n- When adjusting a balance, name the entry exactly \"Balance Adjustment\".\n- **Example 1 (Exclude):** User says \"adjust my main account balance, add 500\". The purpose is a balance correction, so use \"Exclude From Analytics\".\n- **Example 2 (Include):** User says \"I got paid 500\". This is regular income, not a balance adjustment, so use \"Include In Analytics\".\n\n## Critical Rule for 'name' Field:\n- When extracting the `name` for an expense or income, you **MUST ONLY** extract the merchant, entity, or item name.\n- You **MUST EXCLUDE** the amount, currency symbol, date, or words like \"logged\" from the `name` field.\n- **Example:** If the input is \"I spent â‚¬2.00 at Restaurant ABC on September 24\", the `name` should be \"Restaurant ABC\", not \"â‚¬2.00 at Restaurant ABC\".\n\n## Confirmation Message Style:\n- **Your final output upon success MUST be a single, conversational sentence.** This sentence must include the item, amount, date, the **specific category you correctly mapped it to**, and the account used.\n- **Example:** \"OK, I've logged the 13â‚¬ Internet Subscription for this Saturday in the 'Subscriptions' category, from your Main account.\"\n\n## Available Tools:\n- `Think()`\n- `Calculator()`\n- `Get All Categories IDs()`\n- `Get All Sources IDs()`\n- `Get All Accounts IDs()`\n- `Add Expense(name: string, amount: number, budget_id: string, account_id: string, date: string, analytics_status: string)`\n- `Add Income(name: string, amount: number, source_id: string, account_id: string, date: string, analytics_status: string)`\n- `Update Expense(id: string, name: string, amount: number, budget_id: string, account_id: string, date: string, analytics_status: string)`\n- `Update Income(id: string, name: string, amount: number, source_id: string, account_id: string, date: string, analytics_status: string)`\n- `Update Category()`\n\n## Notes:\n- today is {{ $now }}\n- The default account is the Main account"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agentTool",
      "typeVersion": 2.2,
      "position": [
        1232,
        592
      ],
      "id": "a31d268f-1f12-409b-9d73-8c03eb7d6359",
      "name": "Transaction Logger Agent"
    },
    {
      "parameters": {
        "toolDescription": "This agent answers questions about the user's financial data. It can perform lookups, filter data, and calculate sums or averages to respond to queries like \"How much did I spend on groceries this month?",
        "text": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Prompt__User_Message_', ``, 'string') }}",
        "needsFallback": true,
        "options": {
          "systemMessage": "=You are a proactive AI financial analyst. You have different modes of response depending on the request. Your final output must always be plain text, well-structured, and easy to read.\n\n## Core Operating Procedure:\n1.  **Think First:** For any query you receive, your first action **MUST** be to use the `Think` tool to identify which mode of response is appropriate.\n2.  **Execute Based on Plan:** Proceed with the workflow for the mode you identified.\n---\n### Mode 1: Brief Post-Transaction Insight\n-   **Trigger:** Use this mode ONLY when you receive the specific request: **\"A new transaction was just added. Provide a brief, two-sentence summary of the status of that transaction's budget category.\"**\n-   **Action:** Analyze the budget for the category of the most recent transaction ONLY and provide a concise summary (max 2-3 sentences).\n-   **Example Response:** \"With that purchase, you've now spent â‚¬41.50 of your â‚¬100 'Eating Out' budget for the month. You're still on track to stay well within your limit.\"\n\n---\n### Mode 2: Enriched Data Query\n-   **Trigger:** Use this mode for simple questions like \"how much did I spend this week?\"\n-   **Action:** Provide the total amount, followed by a simple breakdown of the top 1-3 spending categories. Use clear labels and line breaks.\n-   **Example Response:**\n    \"You've spent a total of â‚¬33.30 this week.\n\n    Top spending categories:\n    - Eating Out: â‚¬25.00\n    - Groceries: â‚¬8.30\"\n\n---\n### Mode 3: Full Forecast & Advice\n-   **Trigger:** Use this mode ONLY when a user **explicitly asks** for a **\"forecast,\" \"advice,\" \"budget status,\"** or **\"am I on track?\"**\n-   **Action:** Perform your detailed, multi-category analysis, calculate projections, and provide actionable advice. **You MUST present the response using the structured format below**, with clear headings and bullet points (using dashes or asterisks) for readability.\n-   **Example Response Structure:**\n    \"Here is your budget forecast:\n\n    On Track:\n    - Groceries: You've spent â‚¬150 of â‚¬400. You are projected to be well under budget.\n    - Transport: You've spent â‚¬40 of â‚¬100.\n\n    Needs Attention:\n    - Eating Out: You've spent â‚¬90 of â‚¬100. Be mindful of further spending here.\n\n    Actionable Advice:\n    - Your 'Subscriptions' budget is at risk. Be prepared for it to go slightly over when your upcoming â‚¬78 bill is paid.\n    - You are managing 'Eating Out' well, but keep an eye on frequent small purchases.\"\n\n## Available Tools:\n- Think()\n- Get Expenses()\n- Get Incomes()\n- Get All Categories()\n- Calculator()\n\n## Notes:\n- today is {{ $now }}\n- The default account is the Main account"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agentTool",
      "typeVersion": 2.2,
      "position": [
        2784,
        592
      ],
      "id": "03e7f366-7a1e-489e-86c3-eb4ffe79f8ab",
      "name": "Data Analyst Agent"
    },
    {
      "parameters": {
        "resource": "databasePage",
        "databaseId": {
          "__rl": true,
          "value": "21a4bf6b-83b3-81e5-b366-ebd4a5b6b682",
          "mode": "list",
          "cachedResultName": "Expenses",
          "cachedResultUrl": "https://www.notion.so/21a4bf6b83b381e5b366ebd4a5b6b682"
        },
        "title": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Title', ``, 'string') }}",
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "=Amount|number",
              "numberValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues0_Number', ``, 'number') }}"
            },
            {
              "key": "Category|relation",
              "relationValue": [
                "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues1_relationValue0_Relation_IDs', ``, 'string') }}"
              ]
            },
            {
              "key": "Date|date",
              "includeTime": false,
              "date": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues2_Date', ``, 'string') }}",
              "timezone": "Europe/Brussels"
            },
            {
              "key": "=Type|select",
              "selectValue": "=Single"
            },
            {
              "key": "=Accounts|relation",
              "relationValue": [
                "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues4_relationValue0_Relation_IDs', `Must never be empty. The default account is the Main account. This represents the account ID (string)`, 'string') }}"
              ]
            },
            {
              "key": "Analytics|status",
              "statusValue": "={{ $fromAI('propertyValues5_Select', 'Can be Include In Analytics or Exclude From Analytics', 'string', 'Include In Analytics') }}"
            }
          ]
        },
        "options": {
          "icon": "ðŸ”½"
        }
      },
      "type": "n8n-nodes-base.notionTool",
      "typeVersion": 2.2,
      "position": [
        976,
        800
      ],
      "id": "8259686a-6459-4f4c-8194-7c11ad70dbe1",
      "name": "Add Expense",
      "credentials": {
        "notionApi": {
          "id": "xhPFZolX6B78T2VZ",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "databaseId": {
          "__rl": true,
          "value": "21a4bf6b-83b3-8121-ab92-f1814a4e6e69",
          "mode": "list",
          "cachedResultName": "Incomes",
          "cachedResultUrl": "https://www.notion.so/21a4bf6b83b38121ab92f1814a4e6e69"
        },
        "title": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Title', ``, 'string') }}",
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "Amount|number",
              "numberValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues0_Number', ``, 'number') }}"
            },
            {
              "key": "Date|date",
              "includeTime": false,
              "date": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues1_Date', ``, 'string') }}",
              "timezone": "Europe/Brussels"
            },
            {
              "key": "Source|relation",
              "relationValue": [
                "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues2_relationValue0_Relation_IDs', ``, 'string') }}"
              ]
            },
            {
              "key": "Accounts|relation",
              "relationValue": [
                "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues3_relationValue0_Relation_IDs', `Must never be empty. The default account is the Main account. This represents the account ID (string)`, 'string') }}"
              ]
            },
            {
              "key": "Analytics|status",
              "statusValue": "={{ $fromAI('propertyValues4_Select', 'Can be Include In Analytics or Exclude From Analytics', 'string', 'Include In Analytics') }}"
            }
          ]
        },
        "options": {
          "icon": "ðŸ”¼"
        }
      },
      "type": "n8n-nodes-base.notionTool",
      "typeVersion": 2.2,
      "position": [
        1104,
        800
      ],
      "id": "a0c78117-5ea3-4777-9734-f818ab50c5ee",
      "name": "Add Income",
      "credentials": {
        "notionApi": {
          "id": "xhPFZolX6B78T2VZ",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "21a4bf6b-83b3-80d4-a7b3-f51fe09d2f65",
          "mode": "list",
          "cachedResultName": "Accounts",
          "cachedResultUrl": "https://www.notion.so/21a4bf6b83b380d4a7b3f51fe09d2f65"
        },
        "returnAll": true,
        "options": {}
      },
      "type": "n8n-nodes-base.notionTool",
      "typeVersion": 2.2,
      "position": [
        1440,
        800
      ],
      "id": "5e3a943b-4b0f-4656-b7c8-e37c03c98ba8",
      "name": "Get All Accounts",
      "credentials": {
        "notionApi": {
          "id": "xhPFZolX6B78T2VZ",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "21a4bf6b-83b3-8104-ab15-dab184680139",
          "mode": "list",
          "cachedResultName": "Sources",
          "cachedResultUrl": "https://www.notion.so/21a4bf6b83b38104ab15dab184680139"
        },
        "returnAll": true,
        "options": {}
      },
      "type": "n8n-nodes-base.notionTool",
      "typeVersion": 2.2,
      "position": [
        1568,
        800
      ],
      "id": "5860dc63-7fa6-489a-b816-3a70acada0f6",
      "name": "Get All Sources",
      "credentials": {
        "notionApi": {
          "id": "xhPFZolX6B78T2VZ",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "21a4bf6b-83b3-81ef-9ebd-e00bdedc4cb6",
          "mode": "list",
          "cachedResultName": "Budgets",
          "cachedResultUrl": "https://www.notion.so/21a4bf6b83b381ef9ebde00bdedc4cb6"
        },
        "returnAll": true,
        "options": {}
      },
      "type": "n8n-nodes-base.notionTool",
      "typeVersion": 2.2,
      "position": [
        1696,
        800
      ],
      "id": "b232c460-6d56-4dc7-a62c-30242ac132d7",
      "name": "Get All Categories",
      "credentials": {
        "notionApi": {
          "id": "xhPFZolX6B78T2VZ",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "text": "={{ $json.output }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        3280,
        272
      ],
      "id": "1fa3e179-7c05-41ac-972f-12212204e3a8",
      "name": "Send a text message",
      "webhookId": "08abcf89-bb76-40fa-90b2-141ff2decccd",
      "credentials": {
        "telegramApi": {
          "id": "dbqH4B8wU0fwEyd9",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolThink",
      "typeVersion": 1.1,
      "position": [
        3072,
        592
      ],
      "id": "698c1fc8-15f9-4f7e-9a8d-3260f07b1eb3",
      "name": "Think"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolThink",
      "typeVersion": 1.1,
      "position": [
        1824,
        800
      ],
      "id": "f65278c3-5ced-4589-9576-ec0d9ec03387",
      "name": "Think1"
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "text": "=ERROR: {{ $json.output }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        3280,
        464
      ],
      "id": "93ac5360-8713-4105-82f4-cbe14d09cf8b",
      "name": "Send a text message1",
      "webhookId": "08abcf89-bb76-40fa-90b2-141ff2decccd",
      "credentials": {
        "telegramApi": {
          "id": "dbqH4B8wU0fwEyd9",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolThink",
      "typeVersion": 1.1,
      "position": [
        3056,
        800
      ],
      "id": "5fd81413-e4df-46ce-8529-57d0c6f79daf",
      "name": "Think2"
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "update",
        "pageId": {
          "__rl": true,
          "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Database_Page', ``, 'string') }}",
          "mode": "id"
        },
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "=Accounts|relation",
              "relationValue": [
                "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues0_relationValue0_Relation_IDs', `Must never be empty. The default account is the Main account. This represents the account ID (string)`, 'string') }}"
              ]
            },
            {
              "key": "=Amount|number",
              "numberValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues1_Number', ``, 'number') }}"
            },
            {
              "key": "=Category|relation",
              "relationValue": [
                "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues2_relationValue0_Relation_IDs', `Must never be empty. Previous Category ID found in memory (string)`, 'string') }}"
              ]
            },
            {
              "key": "=Date|date",
              "includeTime": false,
              "date": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues3_Date', ``, 'string') }}",
              "timezone": "=default"
            },
            {
              "key": "=Type|select",
              "selectValue": "=Single"
            },
            {
              "key": "=Analytics|status",
              "statusValue": "={{ $fromAI('propertyValues5_Select', 'Must not be empty. Can be Include In Analytics or Exclude From Analytics', 'string', 'Include In Analytics') }}"
            },
            {
              "key": "=Name|title",
              "title": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues6_Title', `Name of the entry. Keep it to previous value if no specific request regarding its value has been provided (string).`, 'string') }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notionTool",
      "typeVersion": 2.2,
      "position": [
        2208,
        800
      ],
      "id": "2c8e53cd-d4db-4c73-9769-178d3fb9e283",
      "name": "Update Expense",
      "credentials": {
        "notionApi": {
          "id": "xhPFZolX6B78T2VZ",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "update",
        "pageId": {
          "__rl": true,
          "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Database_Page', ``, 'string') }}",
          "mode": "id"
        },
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "=Accounts|relation",
              "relationValue": [
                "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues0_relationValue0_Relation_IDs', `Must never be empty. The default account is the Main account. This represents the account ID (string)`, 'string') }}"
              ]
            },
            {
              "key": "=Amount|number",
              "numberValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues1_Number', ``, 'number') }}"
            },
            {
              "key": "=Date|date",
              "includeTime": false,
              "date": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues2_Date', ``, 'string') }}",
              "timezone": "=default"
            },
            {
              "key": "=Name|title",
              "title": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues3_Title', `Name of the entry. Keep it to previous value if no specific request regarding its value has been provided (string).`, 'string') }}"
            },
            {
              "key": "=Source|relation",
              "relationValue": [
                "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues4_relationValue0_Relation_IDs', `Must never be empty. Previous Source ID found in memory (string)`, 'string') }}"
              ]
            },
            {
              "key": "=Analytics|status",
              "statusValue": "={{ $fromAI('propertyValues5_Select', 'Must not be empty. Can be Include In Analytics or Exclude From Analytics', 'string', 'Include In Analytics') }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notionTool",
      "typeVersion": 2.2,
      "position": [
        2352,
        800
      ],
      "id": "ffb044eb-f31d-4c17-95b8-169daacfe210",
      "name": "Update Income",
      "credentials": {
        "notionApi": {
          "id": "xhPFZolX6B78T2VZ",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Telegram Trigger').item.json.message.chat.id }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        1104,
        592
      ],
      "id": "ac0819b4-3fbb-4b88-866a-245a1838a403",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Telegram Trigger').item.json.message.chat.id }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        848,
        800
      ],
      "id": "7717bf92-471f-4349-898e-011d19e84723",
      "name": "Simple Memory1"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Telegram Trigger').item.json.message.chat.id }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        2848,
        800
      ],
      "id": "9dc8a8f9-c335-4ec2-b8c3-f1da6104a1f3",
      "name": "Simple Memory2"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.input_human }}",
        "needsFallback": true,
        "options": {
          "systemMessage": "=You are an AI orchestrator for a personal finance system. Your primary role is to coordinate sub-agents and relay their results to the user.\n\n## Core Operating Procedure:\n1.  **Think First:** Upon receiving any user query, your first and only initial action **MUST** be to use the `Think` tool. Your thought process must clearly state the user's intent (e.g., logging, data query, or forecast) and which sub-agent you will call next.\n2.  **Check the insight cooldown rule defined below.**\n3.  **Execute Based on Plan:** Proceed to call the agent you identified in your thought process.\n4.  **Final Message to the User:** Your final response must be in plain text and easy to read. Use simple structures like short paragraphs, line breaks, and clear headings to present information. Avoid long blocks of text. The goal is clarity and conciseness, providing more detail only when the user requests it.\n\n## Insight Cooldown Rule\nAfter relaying a successful logging confirmation, you must decide whether to provide an insight based on this simple rule: **You will provide an insight UNLESS one has already been provided in your last four (4) answers.**\n\n**Procedure:**\n1.  Look at the immediate history, covering your last four (4) answers.\n2.  Scan your own responses within that window.\n3.  If you find **any** financial insight from the Data Analyst in those last four answers, the cooldown is active. **You MUST NOT send another one.**\n4.  If your last four answers are completely free of financial insights, the cooldown is over. **You MUST then call the Data Analyst Agent** with the concise query: **\"A new transaction was just added. Provide a brief, two-sentence summary of the status of that transaction's budget category.\"**\n\n## Workflow:\n-   If the intent is **Logging**, call the **Transaction Logger Agent**. After it succeeds, relay its confirmation message and immediately apply the **Insight Cooldown Rule**.\n-   If the intent is a **Data Query** or **Forecast**, call the **Data Analyst Agent**.\n\n## Available Tools:\n- Think()\n- Transaction Logger Agent(query: string)\n- Data Analyst Agent(query: string)\n\n## Notes:\n- today is {{ $now }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1088,
        368
      ],
      "id": "0b7fce3c-0fd6-43b3-a7ce-1003a5fcc83c",
      "name": "The Manager Agent",
      "notesInFlow": false,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolCalculator",
      "typeVersion": 1,
      "position": [
        2464,
        800
      ],
      "id": "386dd99e-5305-4635-84b6-40ecb1ef4f40",
      "name": "Calculator"
    },
    {
      "parameters": {
        "modelName": "=models/gemini-2.5-pro",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        976,
        592
      ],
      "id": "fa70f593-3001-4164-8dc9-5902c48755b5",
      "name": "gemini-2.5-pro",
      "credentials": {
        "googlePalmApi": {
          "id": "CTf2VqOHGTu2mfy7",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "model": "=x-ai/grok-4-fast:free",
        "options": {
          "maxRetries": 10
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        848,
        592
      ],
      "id": "02a26ec9-2344-4590-9df3-4fda8317ba39",
      "name": "grok-4-fast",
      "credentials": {
        "openRouterApi": {
          "id": "ZKTJgDKo5oXOolBu",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "model": "=x-ai/grok-4-fast:free",
        "options": {
          "maxRetries": 10
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        2592,
        800
      ],
      "id": "52863e60-f67f-4d23-a990-a8348079e5f3",
      "name": "grok-4-fast2",
      "credentials": {
        "openRouterApi": {
          "id": "ZKTJgDKo5oXOolBu",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "model": "=x-ai/grok-4-fast:free",
        "options": {
          "maxRetries": 10
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        592,
        800
      ],
      "id": "fbcefbad-54ba-49b7-889f-06c6bb5cbf8a",
      "name": "grok-4-fast1",
      "credentials": {
        "openRouterApi": {
          "id": "ZKTJgDKo5oXOolBu",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "model": "=deepseek/deepseek-chat-v3.1:free",
        "options": {
          "maxRetries": 10
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        336,
        800
      ],
      "id": "f80418bf-74a0-4e2d-8b61-23a6e430e19f",
      "name": "deepseek-chat-v3.1",
      "credentials": {
        "openRouterApi": {
          "id": "ZKTJgDKo5oXOolBu",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "modelName": "=models/gemini-2.5-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        336,
        592
      ],
      "id": "a195c346-c4bf-4b09-bb3d-3c3ef8cdbb6d",
      "name": "gemini-2.5-flash",
      "credentials": {
        "googlePalmApi": {
          "id": "CTf2VqOHGTu2mfy7",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "modelName": "=models/gemini-2.5-pro",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        720,
        800
      ],
      "id": "806f0db7-91a9-4d43-b43a-4c6a0d8e15c6",
      "name": "gemini-2.5-pro1",
      "credentials": {
        "googlePalmApi": {
          "id": "CTf2VqOHGTu2mfy7",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "modelName": "=models/gemini-2.5-pro",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        2720,
        800
      ],
      "id": "e06339ff-35c9-4f95-9802-07a2642f0e3f",
      "name": "gemini-2.5-pro2",
      "credentials": {
        "googlePalmApi": {
          "id": "CTf2VqOHGTu2mfy7",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "resource": "audio",
        "modelId": {
          "__rl": true,
          "value": "models/gemini-2.5-flash",
          "mode": "list",
          "cachedResultName": "models/gemini-2.5-flash"
        },
        "inputType": "binary",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "typeVersion": 1,
      "position": [
        592,
        -32
      ],
      "id": "cde6ff4e-1b15-4e7f-985b-8b0304a178cb",
      "name": "Transcribe a recording",
      "credentials": {
        "googlePalmApi": {
          "id": "CTf2VqOHGTu2mfy7",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ $json.message.voice.file_id }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        368,
        -32
      ],
      "id": "3a9032cf-b063-41d4-b4cd-b11179d2d3da",
      "name": "Get a file",
      "webhookId": "afa10f0b-de41-4cfe-8ef6-918e9f65cc00",
      "credentials": {
        "telegramApi": {
          "id": "dbqH4B8wU0fwEyd9",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "loose",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.message.voice }}",
                    "rightValue": "",
                    "operator": {
                      "type": "object",
                      "operation": "exists",
                      "singleValue": true
                    },
                    "id": "a315ed3e-17bb-4063-b791-fa97de448bba"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Voice"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "loose",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "860634d1-8cbf-45bd-b57b-eae577613a73",
                    "leftValue": "={{ $json.message.photo }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Photo"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "loose",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "7a5b57c2-9a29-41c4-8a1e-da97c4f890ba",
                    "leftValue": "={{ $json.message.text }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Text"
            }
          ]
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.3,
      "position": [
        128,
        320
      ],
      "id": "8d4f411e-c22f-465c-818f-958019df36fb",
      "name": "Switch"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d2c77348-8471-4d09-be0b-54cd378c7853",
              "name": "input_human",
              "value": "={{ $json.message.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        672,
        368
      ],
      "id": "be17e0cf-848a-4948-870d-a009767ac0d6",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "34129220-59a1-4288-b732-c6887a944b31",
              "name": "input_human",
              "value": "={{ $json.content.parts[0].text }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "include": "selected",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        816,
        -32
      ],
      "id": "939806a2-0639-41fe-b378-48dd452812ac",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ $json.message.photo[2].file_id }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        368,
        160
      ],
      "id": "b0749229-f26b-4004-b391-abc53cf987ac",
      "name": "Get a file1",
      "webhookId": "afa10f0b-de41-4cfe-8ef6-918e9f65cc00",
      "credentials": {
        "telegramApi": {
          "id": "dbqH4B8wU0fwEyd9",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "34129220-59a1-4288-b732-c6887a944b31",
              "name": "input_human",
              "value": "=Extracted From Image:\n{{ $json.content.parts[0].text }}\nIMPORTANT: {{ $('Telegram Trigger').item.json.message.caption }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        816,
        160
      ],
      "id": "90a27953-53a1-4914-ab5b-56b7140085ec",
      "name": "Edit Fields2"
    },
    {
      "parameters": {
        "resource": "image",
        "operation": "analyze",
        "modelId": {
          "__rl": true,
          "value": "models/gemini-2.5-flash",
          "mode": "list",
          "cachedResultName": "models/gemini-2.5-flash"
        },
        "text": "=Your primary function is to act as a **translator**. You will perform text extraction (OCR) on an image to find all financial transactions and then convert each one into a simple, descriptive sentence, as if written by the user in a journal.\n\n**Your Two-Step Process:**\n\n1.  **Extract Text (OCR):** \"Read\" and extract all visible text from the image that could be related to a financial transaction.\n2.  **Interpret and Convert:** Interpret the extracted text to identify each individual transaction and convert its details into a descriptive, first-person sentence.\n\n**Critical Rule for Dates:**\n* You must only extract a date if it is clearly identifiable and appears to be recent. If you cannot confidently identify a plausible date, do not include a date in your output.\n* When formulating your output, if a transaction's date matches the current date provided in the notes, you **MUST** use the word **\"today\"** instead of the full date string.\n\n**Final Output Rules:**\n\n* Your final output **MUST** be one or more simple, descriptive sentences, with each sentence on a new line.\n* Just Extract the text from the image.\n* Do not add any other text, explanation, or commentary.\n\n**Example of the Required Output:**\n\n`spent 22.50 euro at The Corner Bistro on September 24, 2025.`\n`spent 4.00 euro at City Parking today.`\n`received 500.00 euro from ACME Corp on September 23, 2025.`\n\n**CRITICAL: How to Handle Failures**\n\n1.  **If the text is unreadable due to poor image quality**, you MUST respond with:\n    `Error: The image quality is too poor to reliably extract text data.`\n\n2.  **If you can read the text clearly, but it contains no financial transaction information**, you MUST respond with:\n    `Could not find any financial transactions in the text of this image.`\n\n**Do not guess or invent (hallucinate) information.**\n\n## Notes:\n- today is {{ $now }}",
        "inputType": "binary",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "typeVersion": 1,
      "position": [
        592,
        160
      ],
      "id": "8e49f24b-7e34-4d7c-bc66-6cd62c79ce3d",
      "name": "Analyze an image",
      "credentials": {
        "googlePalmApi": {
          "id": "CTf2VqOHGTu2mfy7",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Use this tool to update budget pages properties.",
        "resource": "databasePage",
        "operation": "update",
        "pageId": {
          "__rl": true,
          "mode": "id",
          "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Database_Page', ``, 'string') }}",
          "__regex": "^([0-9a-f]{8}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{12})"
        },
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "=Name|title",
              "title": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues0_Title', `Name of the category. Keep it to previous value if no specific request regarding its value has been provided (string).`, 'string') }}"
            },
            {
              "key": "=This Month Budget|number",
              "numberValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues1_Number', `Must never be empty unless specifically requested by the user. Keep it to previous value if no specific request regarding its value has been provided (number).`, 'number') }}"
            },
            {
              "key": "=Accounts|relation",
              "relationValue": [
                "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('propertyValues2_relationValue0_Relation_IDs', `Must never be empty. The default account is the Main account. This represents the account ID (string)`, 'string') }}"
              ]
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notionTool",
      "typeVersion": 2.2,
      "position": [
        1296,
        800
      ],
      "id": "064a1890-69d0-44b4-9329-8bacddde4ac2",
      "name": "Update Category",
      "credentials": {
        "notionApi": {
          "id": "xhPFZolX6B78T2VZ",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "21a4bf6b-83b3-81e5-b366-ebd4a5b6b682",
          "mode": "list",
          "cachedResultName": "Expenses",
          "cachedResultUrl": "https://www.notion.so/21a4bf6b83b381e5b366ebd4a5b6b682"
        },
        "returnAll": true,
        "filterType": "manual",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "key": "=Date|date",
              "condition": "=on_or_after",
              "date": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('conditions0_Date', `date \"on or after\" chose properly based on the request`, 'string') }}"
            },
            {
              "key": "Date|date",
              "condition": "=on_or_before",
              "date": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('conditions1_Date', `date \"on or before\" chose properly based on the request`, 'string') }}"
            }
          ]
        },
        "options": {
          "sort": {
            "sortValue": [
              {
                "key": "Date|date",
                "direction": "descending"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.notionTool",
      "typeVersion": 2.2,
      "position": [
        1920,
        800
      ],
      "id": "0cd844e4-9e3c-4249-8ba2-2f0cdb5c2d01",
      "name": "Get Expenses",
      "credentials": {
        "notionApi": {
          "id": "xhPFZolX6B78T2VZ",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "21a4bf6b-83b3-8121-ab92-f1814a4e6e69",
          "mode": "list",
          "cachedResultName": "Incomes",
          "cachedResultUrl": "https://www.notion.so/21a4bf6b83b38121ab92f1814a4e6e69"
        },
        "returnAll": true,
        "filterType": "manual",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "key": "Date|date",
              "condition": "on_or_after",
              "date": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('conditions0_Date', `date \"on or after\" chose properly based on the request`, 'string') }}"
            },
            {
              "key": "Date|date",
              "condition": "on_or_before",
              "date": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('conditions1_Date', `date \"on or before\" chose properly based on the request`, 'string') }}"
            }
          ]
        },
        "options": {
          "sort": {
            "sortValue": [
              {
                "key": "Date|date",
                "direction": "descending"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.notionTool",
      "typeVersion": 2.2,
      "position": [
        2064,
        800
      ],
      "id": "01f951db-e67b-4cb3-8307-bfcbf1cb82fa",
      "name": "Get Incomes",
      "credentials": {
        "notionApi": {
          "id": "xhPFZolX6B78T2VZ",
          "name": "Notion account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transaction Logger Agent": {
      "ai_tool": [
        [
          {
            "node": "The Manager Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Data Analyst Agent": {
      "ai_tool": [
        [
          {
            "node": "The Manager Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Add Expense": {
      "ai_tool": [
        [
          {
            "node": "Transaction Logger Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Add Income": {
      "ai_tool": [
        [
          {
            "node": "Transaction Logger Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get All Accounts": {
      "ai_tool": [
        [
          {
            "node": "Transaction Logger Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Data Analyst Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get All Sources": {
      "ai_tool": [
        [
          {
            "node": "Transaction Logger Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Data Analyst Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get All Categories": {
      "ai_tool": [
        [
          {
            "node": "Transaction Logger Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Data Analyst Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Think": {
      "ai_tool": [
        [
          {
            "node": "The Manager Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Think1": {
      "ai_tool": [
        [
          {
            "node": "Transaction Logger Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Think2": {
      "ai_tool": [
        [
          {
            "node": "Data Analyst Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Update Expense": {
      "ai_tool": [
        [
          {
            "node": "Transaction Logger Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Update Income": {
      "ai_tool": [
        [
          {
            "node": "Transaction Logger Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "The Manager Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory1": {
      "ai_memory": [
        [
          {
            "node": "Transaction Logger Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory2": {
      "ai_memory": [
        [
          {
            "node": "Data Analyst Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "The Manager Agent": {
      "main": [
        [
          {
            "node": "Send a text message",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send a text message1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calculator": {
      "ai_tool": [
        [
          {
            "node": "Data Analyst Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Transaction Logger Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "gemini-2.5-pro": {
      "ai_languageModel": [
        [
          {
            "node": "The Manager Agent",
            "type": "ai_languageModel",
            "index": 1
          }
        ]
      ]
    },
    "grok-4-fast": {
      "ai_languageModel": [
        [
          {
            "node": "The Manager Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "grok-4-fast2": {
      "ai_languageModel": [
        [
          {
            "node": "Data Analyst Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "grok-4-fast1": {
      "ai_languageModel": [
        [
          {
            "node": "Transaction Logger Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "gemini-2.5-pro1": {
      "ai_languageModel": [
        [
          {
            "node": "Transaction Logger Agent",
            "type": "ai_languageModel",
            "index": 1
          }
        ]
      ]
    },
    "gemini-2.5-pro2": {
      "ai_languageModel": [
        [
          {
            "node": "Data Analyst Agent",
            "type": "ai_languageModel",
            "index": 1
          }
        ]
      ]
    },
    "Get a file": {
      "main": [
        [
          {
            "node": "Transcribe a recording",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transcribe a recording": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Get a file",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get a file1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "The Manager Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "The Manager Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get a file1": {
      "main": [
        [
          {
            "node": "Analyze an image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields2": {
      "main": [
        [
          {
            "node": "The Manager Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze an image": {
      "main": [
        [
          {
            "node": "Edit Fields2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Category": {
      "ai_tool": [
        [
          {
            "node": "Transaction Logger Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Expenses": {
      "ai_tool": [
        [
          {
            "node": "Transaction Logger Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Incomes": {
      "ai_tool": [
        [
          {
            "node": "Data Analyst Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1",
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "BdPZPAcsRgUSMBIk",
    "timeSavedPerExecution": 0
  },
  "versionId": "320879ea-0f16-4f6d-900f-b7cd3d99fbbb",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "f6b23180a40ad9c1f19233919060eb2036225d0ebab77c0e6d7346fdfd5470bc"
  },
  "id": "BdPZPAcsRgUSMBIk",
  "tags": []
}